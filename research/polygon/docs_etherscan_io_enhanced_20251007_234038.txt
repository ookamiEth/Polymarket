# Gitbook Documentation Export
Source: https://docs.etherscan.io
Platform: Gitbook (confidence: 0.8)
Exported: 2025-10-07 23:40:38
Total Pages: 24
Failed Pages: 2

================================================================================

## Table of Contents

1. [Introduction](https://docs.etherscan.io)
2. [Getting an API Key](https://docs.etherscan.io/getting-an-api-key)
3. [Rate Limits](https://docs.etherscan.io/rate-limits)
4. [V1 to V2 API Migration Guide](https://docs.etherscan.io/v2-migration)
5. [Accounting/Taxes](https://docs.etherscan.io/use-cases/accounting-taxes)
6. [üëãGetting Started](https://docs.etherscan.io/metadata-api/)
7. [Accounts](https://docs.etherscan.io/api-endpoints/accounts)
8. [Contracts](https://docs.etherscan.io/api-endpoints/contracts)
9. [Transactions](https://docs.etherscan.io/api-endpoints/stats)
10. [Blocks](https://docs.etherscan.io/api-endpoints/blocks)
11. [Logs](https://docs.etherscan.io/api-endpoints/logs)
12. [Geth/Parity Proxy](https://docs.etherscan.io/api-endpoints/geth-parity-proxy)
13. [Tokens](https://docs.etherscan.io/api-endpoints/tokens)
14. [Gas Tracker](https://docs.etherscan.io/api-endpoints/gas-tracker)
15. [Stats](https://docs.etherscan.io/api-endpoints/stats-1)
16. [L2 Deposits/Withdrawals](https://docs.etherscan.io/api-endpoints/chain-specific)
17. [Usage](https://docs.etherscan.io/api-endpoints/blocks-1)
18. [Etherscan API PRO](https://docs.etherscan.io/api-pro/etherscan-api-pro)
19. [Track Uniswap V4 DEX Trades](https://docs.etherscan.io/cookbook/track-uniswap-v4-dex-trades)
20. [Get An Address's Full Transaction History](https://docs.etherscan.io/get-an-addresss-full-transaction-history)
21. [Verify with Foundry](https://docs.etherscan.io/contract-verification/verify-with-foundry)
22. [Verify with Hardhat](https://docs.etherscan.io/contract-verification/verify-with-hardhat)
23. [Verify with Remix](https://docs.etherscan.io/contract-verification/verify-with-remix)
24. [Common Verification Errors](https://docs.etherscan.io/common-verification-errors)

================================================================================

# Introduction

Source: https://docs.etherscan.io
Extraction Method: playwright
Components: code_block(2)

Copy
# Introduction
$Check out the V1 to V2 API Migration Guide here

This V2 update is aimed at a single goal, of unifying EVM data across 50+ chains. ü§ù

### Why V2
With the rise of multichain apps, many projects' GitHub repositories resemble a ( shortened ) version of this.

Copy
```
ETHERSCAN_API_KEY=VZFDUWB3YGQ1YCDKTCU1D6DDSS
BSCSCAN_API_KEY=ZM8ACMJB67C2IXKKBF8URFUNSY
SNOWSCAN_API_KEY=ATJQERBKV1CI3GVKNSE3Q7RGEJ
ARBISCAN_API_KEY=B6SVGA7K3YBJEQ69AFKJF4YHVX
OPTIMISM_API_KEY=66N5FRNV1ZD4I87S7MAHCJVXFJ

ETHERSCAN_API_URL=https://api.etherscan.io/api
BSCSCAN_API_KEY=https://api.bscscan.com/api
SNOWSCAN_API_KEY=https://api.snowscan.xyz/api
ARBISCAN_API_KEY=https://api.arbiscan.io/api
OPTIMISM_API_KEY=https://api-optimistic.etherscan.io/api
```

As support for Etherscan explorers across multiple chains grew, so did the fragmentation of the developer experience.

### Single API Key
You can now query data from any of our 50+ supported chains with a single API key.

This includes features like contract verification ‚úÖ, fetching transactions across chains üîµ and more.

To add support for a new chain, simply append its chain ID to your array, like this JavaScript ( intern can't get Python installed on Windows )

$Copy
```
const chains = [42161, 8453, 10, 534352, 81457]

for (const chain of chains) {

  // endpoint accepts one chain at a time, loop for all your chains
  const balance = fetch(`https://api.etherscan.io/v2/api?
     chainid=${chain}
     &module=account
     &action=balance
     &address=0xb5d85cbf7cb3ee0d56b3bb207d5fc4b82f43f511
     &tag=latest&apikey=YourApiKeyToken`)
     
}
```

/$We don't currently support all endpoints on all chains. Please feel free to reach out if you need something specific!

/$[NextGetting an API Key](/getting-an-api-key)Last updated 3 months ago

================================================================================

# Getting an API Key

Source: https://docs.etherscan.io/getting-an-api-key
Extraction Method: playwright

Copy
# Getting an API Key
$A valid API Key is required for all queries, let us know if you run into any issues ‚úÖ

## Creating an API Key
From your Account Dashboard, click on the navigation tab labelled üóùÔ∏è API-KEYs

From there, you may click on Add to create a new key and give a name to your project.

Each Etherscan account is limited to creating 3 keys at any one time.

/$[PreviousIntroduction](/)[NextRate Limits](/rate-limits)Last updated 9 months ago

================================================================================

# Rate Limits

Source: https://docs.etherscan.io/rate-limits
Extraction Method: playwright

Copy
# Rate Limits
$Historical endpoints and name tags have a rate limit of 2 calls/s regardless of API PRO tier

API TierRate LimitFree

5 calls/second , up to 100,000 calls/day

Standard

10 calls/second , up to 200,000 calls/day

Advanced

20 calls/second , up to 500,000 calls/day

Professional

30 calls/second , up to 1,000,000 calls/day

Pro Plus

30 calls/second , up to 1,500,000 calls/day

Dedicated/Custom

Contact Us

/$[PreviousGetting an API Key](/getting-an-api-key)[NextSupported Chains](/supported-chains)Last updated 6 months ago

================================================================================

# V1 to V2 API Migration Guide

Source: https://docs.etherscan.io/v2-migration
Extraction Method: playwright
Components: code_block(5)

Copy
# V1 to V2 API Migration Guide
$Use your Etherscan API KEY only.

### If you're coming from V1
Your base url looks like this

Copy
```
https://api.etherscan.io/api
```

Just append V2 to the base url, and a chainId parameter

Copy
```
https://api.etherscan.io/v2/api?chainid=1
```

### If you're coming from another explorer, Basescan/Arbiscan/Polygonscan etc
Your query looks something like one of these

Copy
```
https://api.basescan.org/api
https://api.polygonscan.com/api
https://api.bscscan.com/api
https://api.apescan.io/api
```

Change your base URL to Etherscan, and point the chainId to 8453 or any chain you want

Copy
```
https://api.etherscan.io/v2/api?chainid=8453
```

### If you're starting with V2
Run this complete script with Node JS, node script.js

$Copy
```
async function main() {

    // query ETH balances on Arbitrum, Base and Optimism

    const chains = [42161, 8453, 10]

    for (const chain of chains) {

        // endpoint accepts one chain at a time, loop for all your chains
   
        const query = await fetch(`https://api.etherscan.io/v2/api
           ?chainid=${chain}
           &module=account
           &action=balance
           &address=0xb5d85cbf7cb3ee0d56b3bb207d5fc4b82f43f511
           &tag=latest&apikey=YourApiKeyToken`)
           
        const response = await query.json()

        const balance = response.result
        console.log(balance)

    }
}

main()
```

/$/$[PreviousSupported Chains](/supported-chains)[NextAccounting/Taxes](/use-cases/accounting-taxes)Last updated 3 months ago

================================================================================

# Accounting/Taxes

Source: https://docs.etherscan.io/use-cases/accounting-taxes
Extraction Method: playwright

Copy
1. üîçUse Cases

# Accounting/Taxes
$
## Transaction Categorization
Categorizing transactions correctly such as "swap", "transfer" is crucial to determine if a transaction is taxable or not.

Use the functionName included in all transaction lists to automatically categorize user transactions.

## Track All Transfers
Support for the top token standards including ERC20/ERC721/ERC1155, with added support for ETH staking and withdrawal transactions.

## Multichain Ready
Support user transactions across ETH, Optimism, Arbitrum, and other leading L2 with the same code base.

Just change your chain ID to any of our 50+ supported chains.

## Check Etherscan
Transactions, token transfers and token prices are mirrored to the Etherscan explorer.

Allow users to verify what's happened on chain and see the numbers add up.

/$[PreviousV1 to V2 API Migration Guide](/v2-migration)[NextAccounts](/api-endpoints/accounts)Last updated 3 months ago

================================================================================

# üëãGetting Started

Source: https://docs.etherscan.io/metadata-api/
Extraction Method: playwright

Copy
# üëãGetting Started
$As the leading search engine for EVM based chains, Etherscan enables users to explore and verify addresses, tokens, and transactions. By indexing public blockchain data and providing additional contextual information, we enhance users' comprehension of the information.

With the Metadata API, builders can enrich their projects and applications by providing valuable information to users, empowering them to make informed decisions when interacting with Ethereum addresses and contracts.

We offer two solutions through the Metadata API:

### Address Metadata
The Address Metadata provides endpoints that return additional information for addresses, including Public Name Tags and Labels, along with extra attributes like ENS and Token Reputation. This feature is available exclusively through the API Pro Plus plan.

List of Supported Chains.

### Metadata CSV
The Metadata CSV is an enterprise-grade solution tailored for organizations and projects with extensive metadata needs. It provides powerful endpoints for retrieving an extensive list of metadata in CSV format. This extensive dataset includes of labels, name tags, and additional information associated with each address.

It allows you to retrieve the list of addresses specifically associated with desired label(s), enabling precise targeting and data extraction that aligns with your unique requirements. If you are interested in exploring this enterprise solution further, please feel free to reach out to us for more information.

/$[NextAddress Metadata](/metadata-api/api-endpoint/address-metadata)Last updated 2 months ago

================================================================================

# Accounts

Source: https://docs.etherscan.io/api-endpoints/accounts
Extraction Method: playwright
Components: code_block(28)

Copy
1. üéØAPI Endpoints

# Accounts
$Endpoints with  are under the API Pro subscription. To upgrade your API plan, browse through the Etherscan APIs page.

## Get Ether Balance for a Single Address
Returns the Ether balance of a given address.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=balance
   &address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae
   &tag=latest
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

tag

the string pre-defined block parameter, either earliest, pending or latest

Sample response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"40891626854930000000000" 
}
```

üìñ Tip: The result is returned in wei.

Convert Ethereum units using our Unit Converter.

## Get a list of Bridge Transactions By Address
Returns the list of bridge transactions associated with an address, with optional pagination.

Applicable to Gnosis (100), BTTC (199), and Polygon (137) only.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=100
   &module=account
   &action=txnbridge
   &address=0x1545c4ccf40a5e89ac1482a32485f62d369560d3
   &page=1
   &offset=100
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to query bridge transactions

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

$Copy
```
{"status":"1","message":"OK","result":[{"hash":"0x79eaf9951f474d5fd78bae5e3d6e089b54e61b81d272ce6f98e8ac6b56ec0f93","blockNumber":"42107370","timeStamp":"1757792370","from":"0xfa98b60e02a61b6590f073cad56e68326652d094","address":"0x1545c4ccf40a5e89ac1482a32485f62d369560d3","amount":"1000000000000000000","tokenName":"","symbol":"","contractAddress":"0x7301cfa0e1756b71869e93d4e4dca5c7d0eb0aa6","divisor":""}]}
```

/$üìñ Tip: timeStamp is a Unix timestamp. Amounts are returned in the smallest unit (wei for ETH). For tokens, use divisor if provided to scale amount to display units.

## Get Ether Balance for Multiple Addresses in a Single Call
Returns the balance of the accounts from a list of addresses.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=balancemulti
   &address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a,0x63a9975ba31b0b9626b34300f7f627147df1f526,0x198ef1ec325a96cc354c7266a038be8b5c558f67
   &tag=latest
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the strings representing the addresses to check for balance, separated by ,

up to 20 addresses per call

tag

the integer pre-defined block parameter, either earliest, pending or latest

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "account":"0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a",
         "balance":"40891626854930000000000"
      },
      {
         "account":"0x63a9975ba31b0b9626b34300f7f627147df1f526",
         "balance":"332567136222827062478"
      },
      {
         "account":"0x198ef1ec325a96cc354c7266a038be8b5c558f67",
         "balance":"0"
      }
   ]
}
```

/$üìñ Tip: The result is returned in wei.

Convert Ethereum units using our Unit Converter.

## Get a list of 'Normal' Transactions By Address
Returns the list of transactions performed by an address, with optional pagination.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlist
   &address=0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC
   &startblock=0
   &endblock=99999999
   &page=1
   &offset=10
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

‚Äã‚Äã ‚Äã üìù Note : This API endpoint returns 1000/5000 records per query for paid/free tier, apply pagination using startBlock and endBlock numbers.

ParameterDescriptionaddress

the string representing the addresses to check for balance

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

sort

the sorting preference, use asc to sort by ascending and desc to sort by descendin Tip: Specify a smaller startblock and endblock range for faster search results.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"14923678",
         "timeStamp":"1654646411",
         "hash":"0xc52783ad354aecc04c670047754f062e3d6d04e8f5b24774472651f9c3882c60",
         "nonce":"1",
         "blockHash":"0x7e1638fd2c6bdd05ffd83c1cf06c63e2f67d0f802084bef076d06bdcf86d1bb0",
         "transactionIndex":"61",
         "from":"0x9aa99c23f67c81701c772b106b4f83f6e858dd2e",
         "to":"",
         "value":"0",
         "gas":"6000000",
         "gasPrice":"83924748773",
         "isError":"0",
         "txreceipt_status":"1",
         "input":"0x6101606040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140908152503480156200003a57600080fd5b5060405162005ddb38038062005ddb833981810160405281019062000060919062000d70565b6040518060400160405280600381526020017f486f700000000000000000000000000000000000000000000000000000000000815250806040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f486f7000000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f484f50000000000000000000000000000000000000000000000000000000000081525081600390805190602001906200015192919062000ca9565b5080600490805190602001906200016a92919062000ca9565b50505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620001d68184846200027760201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508061012081815250505050505050506200024362000237620002b360201b60201c565b620002bb60201b60201c565b6200025533846200038160201b60201c565b6200026730836200038160201b60201c565b80600b81905550505050620012b3565b600083838346306040516020016200029495949392919062000e9b565b6040516020818303038152906040528051906020012090509392505050565b600033905090565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200039882826200039c60201b620017a81760201c565b5050565b620003b382826200045a60201b620018351760201c565b620003c3620005d360201b60201c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16620003f1620005f760201b60201c565b111562000435576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200042c9062000ef8565b60405180910390fd5b6200045460086200060160201b6200199517836200061960201b60201c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004c49062000f5e565b60405180910390fd5b620004e160008383620008ca60201b60201c565b8060026000828254620004f5919062000fdb565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200054c919062000fdb565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620005b3919062000f80565b60405180910390a3620005cf60008383620008cf60201b60201c565b5050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b6000600254905090565b6000818362000611919062000fdb565b905092915050565b600080600085805490509050600081146200068e57856001826200063e919062001038565b815481106200065257620006516200114f565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1662000691565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250620006bd83858760201c565b91506000811180156200071657504386600183620006dc919062001038565b81548110620006f057620006ef6200114f565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16145b15620007b7576200073282620008ec60201b620019ab1760201c565b8660018362000742919062001038565b815481106200075657620007556200114f565b5b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550620008c1565b856040518060400160405280620007d9436200095a60201b62001a161760201c565b63ffffffff168152602001620007fa85620008ec60201b620019ab1760201c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b50935093915050565b505050565b620008e7838383620009b060201b62001a691760201c565b505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801682111562000952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009499062000f1a565b60405180910390fd5b819050919050565b600063ffffffff8016821115620009a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200099f9062000f3c565b60405180910390fd5b819050919050565b620009c883838362000a0060201b62001a941760201c565b620009fb620009dd8462000a0560201b60201c565b620009ee8462000a0560201b60201c565b8362000a6e60201b60201c565b505050565b505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562000aab5750600081115b1562000c8c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000b9e5760008062000b45600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002062000c9160201b62001a9917856200061960201b60201c565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405162000b9392919062000f9d565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161462000c8b5760008062000c32600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206200060160201b6200199517856200061960201b60201c565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724838360405162000c8092919062000f9d565b60405180910390a250505b5b505050565b6000818362000ca1919062001038565b905092915050565b82805462000cb790620010bb565b90600052602060002090601f01602090048101928262000cdb576000855562000d27565b82601f1062000cf657805160ff191683800117855562000d27565b8280016001018555821562000d27579182015b8281111562000d2657825182559160200191906001019062000d09565b5b50905062000d36919062000d3a565b5090565b5b8082111562000d5557600081600090555060010162000d3b565b5090565b60008151905062000d6a8162001299565b92915050565b60008060006060848603121562000d8c5762000d8b6200117e565b5b600062000d9c8682870162000d59565b935050602062000daf8682870162000d59565b925050604062000dc28682870162000d59565b9150509250925092565b62000dd78162001073565b82525050565b62000de88162001087565b82525050565b600062000dfd60308362000fca565b915062000e0a8262001183565b604082019050919050565b600062000e2460278362000fca565b915062000e3182620011d2565b604082019050919050565b600062000e4b60268362000fca565b915062000e588262001221565b604082019050919050565b600062000e72601f8362000fca565b915062000e7f8262001270565b602082019050919050565b62000e9581620010b1565b82525050565b600060a08201905062000eb2600083018862000ddd565b62000ec1602083018762000ddd565b62000ed0604083018662000ddd565b62000edf606083018562000e8a565b62000eee608083018462000dcc565b9695505050505050565b6000602082019050818103600083015262000f138162000dee565b9050919050565b6000602082019050818103600083015262000f358162000e15565b9050919050565b6000602082019050818103600083015262000f578162000e3c565b9050919050565b6000602082019050818103600083015262000f798162000e63565b9050919050565b600060208201905062000f97600083018462000e8a565b92915050565b600060408201905062000fb4600083018562000e8a565b62000fc3602083018462000e8a565b9392505050565b600082825260208201905092915050565b600062000fe882620010b1565b915062000ff583620010b1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200102d576200102c620010f1565b5b828201905092915050565b60006200104582620010b1565b91506200105283620010b1565b925082821015620010685762001067620010f1565b5b828203905092915050565b6000620010808262001091565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006002820490506001821680620010d457607f821691505b60208210811415620010eb57620010ea62001120565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620012a481620010b1565b8114620012b057600080fd5b50565b60805160a05160c05160601c60e051610100516101205161014051614aca62001311600039600061141e0152600061203d0152600061207f0152600061205e01526000611f9301526000611fe9015260006120120152614aca6000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a5780639ab24eb0116100ad578063c3cda5201161007c578063c3cda52014610612578063d505accf1461062e578063dd62ed3e1461064a578063f1127ed81461067a578063f2fde38b146106aa576101fb565b80639ab24eb0146105525780639e34070f14610582578063a457c2d7146105b2578063a9059cbb146105e2576101fb565b80637ecebe00116100e95780637ecebe00146104b65780638da5cb5b146104e65780638e539e8c1461050457806395d89b4114610534576101fb565b806370a0823114610444578063715018a614610474578063761229031461047e5780637cb647591461049a576101fb565b80633950935111610192578063587cde1e11610161578063587cde1e146103aa5780635c19a95c146103da57806366deac47146103f65780636fcfff4514610414576101fb565b806339509351146103125780633a46b1a81461034257806340c10f191461037257806342966c681461038e576101fb565b806323b872dd116101ce57806323b872dd146102885780632eb4a7ab146102b8578063313ce567146102d65780633644e515146102f4576101fb565b806301681a621461020057806306fdde031461021c578063095ea7b31461023a57806318160ddd1461026a575b600080fd5b61021a600480360381019061021591906130df565b6106c6565b005b61022461079c565b6040516102319190613b56565b60405180910390f35b610254600480360381019061024f9190613241565b61082e565b60405161026191906139e2565b60405180910390f35b610272610851565b60405161027f9190613f13565b60405180910390f35b6102a2600480360381019061029d919061314c565b61085b565b6040516102af91906139e2565b60405180910390f35b6102c061088a565b6040516102cd91906139fd565b60405180910390f35b6102de610890565b6040516102eb9190613f72565b60405180910390f35b6102fc610899565b60405161030991906139fd565b60405180910390f35b61032c60048036038101906103279190613241565b6108a8565b60405161033991906139e2565b60405180910390f35b61035c60048036038101906103579190613241565b610952565b6040516103699190613f13565b60405180910390f35b61038c60048036038101906103879190613241565b6109e6565b005b6103a860048036038101906103a3919061337b565b610a70565b005b6103c460048036038101906103bf91906130df565b610b00565b6040516103d191906139c7565b60405180910390f35b6103f460048036038101906103ef91906130df565b610b69565b005b6103fe610b7d565b60405161040b9190613f13565b60405180910390f35b61042e600480360381019061042991906130df565b610b83565b60405161043b9190613f57565b60405180910390f35b61045e600480360381019061045991906130df565b610bd7565b60405161046b9190613f13565b60405180910390f35b61047c610c1f565b005b610498600480360381019061049391906133a8565b610ca7565b005b6104b460048036038101906104af919061334e565b610e32565b005b6104d060048036038101906104cb91906130df565b610f36565b6040516104dd9190613f13565b60405180910390f35b6104ee610f86565b6040516104fb91906139c7565b60405180910390f35b61051e6004803603810190610519919061337b565b610fb0565b60405161052b9190613f13565b60405180910390f35b61053c611006565b6040516105499190613b56565b60405180910390f35b61056c600480360381019061056791906130df565b611098565b6040516105799190613f13565b60405180910390f35b61059c6004803603810190610597919061337b565b6111a9565b6040516105a991906139e2565b60405180910390f35b6105cc60048036038101906105c79190613241565b6111c6565b6040516105d991906139e2565b60405180910390f35b6105fc60048036038101906105f79190613241565b6112b0565b60405161060991906139e2565b60405180910390f35b61062c60048036038101906106279190613281565b6112d3565b005b6106486004803603810190610643919061319f565b6113d7565b005b610664600480360381019061065f919061310c565b611519565b6040516106719190613f13565b60405180910390f35b610694600480360381019061068f919061330e565b6115a0565b6040516106a19190613ef8565b60405180910390f35b6106c460048036038101906106bf91906130df565b6116b0565b005b6106ce611aaf565b73ffffffffffffffffffffffffffffffffffffffff166106ec610f86565b73ffffffffffffffffffffffffffffffffffffffff1614610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990613dd8565b60405180910390fd5b600b544211610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d90613d58565b60405180910390fd5b610799308261079430610bd7565b611ab7565b50565b6060600380546107ab90614193565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790614193565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b600080610839611aaf565b9050610846818585611d38565b600191505092915050565b6000600254905090565b600080610866611aaf565b9050610873858285611f03565b61087e858585611ab7565b60019150509392505050565b600a5481565b60006012905090565b60006108a3611f8f565b905090565b6000806108b3611aaf565b9050610947818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109429190613fb4565b611d38565b600191505092915050565b6000438210610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90613bb8565b60405180910390fd5b6109de600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836120a9565b905092915050565b6109ee611aaf565b73ffffffffffffffffffffffffffffffffffffffff16610a0c610f86565b73ffffffffffffffffffffffffffffffffffffffff1614610a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5990613dd8565b60405180910390fd5b610a6c82826121b5565b5050565b610a78611aaf565b73ffffffffffffffffffffffffffffffffffffffff16610a96610f86565b73ffffffffffffffffffffffffffffffffffffffff1614610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae390613dd8565b60405180910390fd5b610afd610af7610f86565b826121c3565b50565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610b7a610b74611aaf565b826121d1565b50565b600b5481565b6000610bd0600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611a16565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c27611aaf565b73ffffffffffffffffffffffffffffffffffffffff16610c45610f86565b73ffffffffffffffffffffffffffffffffffffffff1614610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290613dd8565b60405180910390fd5b610ca560006122eb565b565b60003385604051602001610cbc929190613938565b604051602081830303815290604052805190602001209050600080610d25858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600a54856123b1565b9150915081610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090613bd8565b60405180910390fd5b610d72816111a9565b15610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da990613df8565b60405180910390fd5b610dc681600c61248d90919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d488604051610e0c9190613f13565b60405180910390a2610e1e33876121d1565b610e29303389611ab7565b50505050505050565b610e3a611aaf565b73ffffffffffffffffffffffffffffffffffffffff16610e58610f86565b73ffffffffffffffffffffffffffffffffffffffff1614610eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea590613dd8565b60405180910390fd5b6000801b600a5414610ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eec90613c38565b60405180910390fd5b80600a819055507f1b930366dfeaa7eb3b325021e4ae81e36527063452ee55b86c95f85b36f4c31c81604051610f2b91906139fd565b60405180910390a150565b6000610f7f600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206124cb565b9050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000438210610ff4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610feb90613bb8565b60405180910390fd5b610fff6008836120a9565b9050919050565b60606004805461101590614193565b80601f016020809104026020016040519081016040528092919081815260200182805461104190614193565b801561108e5780601f106110635761010080835404028352916020019161108e565b820191906000526020600020905b81548152906001019060200180831161107157829003601f168201915b5050505050905090565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000811461118057600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826111349190614095565b8154811061114557611144614302565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611183565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b60006111bf82600c6124d990919063ffffffff16565b9050919050565b6000806111d1611aaf565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e90613eb8565b60405180910390fd5b6112a48286868403611d38565b60019250505092915050565b6000806112bb611aaf565b90506112c8818585611ab7565b600191505092915050565b83421115611316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130d90613bf8565b60405180910390fd5b60006113786113707fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf8989896040516020016113559493929190613a79565b60405160208183030381529060405280519060200120612515565b85858561252f565b90506113838161255a565b86146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613c78565b60405180910390fd5b6113ce81886121d1565b50505050505050565b8342111561141a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141190613cf8565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000008888886114498c61255a565b8960405160200161145f96959493929190613a18565b604051602081830303815290604052805190602001209050600061148282612515565b905060006114928287878761252f565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f990613d98565b60405180910390fd5b61150d8a8a8a611d38565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6115a8612fe2565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff16815481106115ff576115fe614302565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6116b8611aaf565b73ffffffffffffffffffffffffffffffffffffffff166116d6610f86565b73ffffffffffffffffffffffffffffffffffffffff161461172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390613dd8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561179c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179390613c98565b60405180910390fd5b6117a5816122eb565b50565b6117b28282611835565b6117ba6125b8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166117e0610851565b1115611821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181890613db8565b60405180910390fd5b61182f6008611995836125dc565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189c90613ed8565b60405180910390fd5b6118b160008383612854565b80600260008282546118c39190613fb4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119189190613fb4565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161197d9190613f13565b60405180910390a361199160008383612859565b5050565b600081836119a39190613fb4565b905092915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016821115611a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0590613e18565b60405180910390fd5b819050919050565b600063ffffffff8016821115611a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5890613e78565b60405180910390fd5b819050919050565b611a74838383611a94565b611a8f611a8084610b00565b611a8984610b00565b83612869565b505050565b505050565b60008183611aa79190614095565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1e90613e58565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8e90613b98565b60405180910390fd5b611ba2838383612854565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f90613d18565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cbb9190613fb4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d1f9190613f13565b60405180910390a3611d32848484612859565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9f90613e98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0f90613cb8565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611ef69190613f13565b60405180910390a3505050565b6000611f0f8484611519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f895781811015611f7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7290613cd8565b60405180910390fd5b611f888484848403611d38565b5b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561200b57507f000000000000000000000000000000000000000000000000000000000000000046145b15612038577f000000000000000000000000000000000000000000000000000000000000000090506120a6565b6120a37f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612a62565b90505b90565b6000808380549050905060005b818110156121285760006120ca8284612a9c565b9050848682815481106120e0576120df614302565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16111561211257809250612122565b60018161211f9190613fb4565b91505b506120b6565b6000821461218a578460018361213e9190614095565b8154811061214f5761214e614302565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661218d565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250505092915050565b6121bf82826117a8565b5050565b6121cd8282612ac2565b5050565b60006121dc83610b00565b905060006121e984610bd7565b905082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a46122e5828483612869565b50505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060008390506000805b875181101561247a576002826123d3919061403b565b915060008882815181106123ea576123e9614302565b5b6020026020010151905080841161242b57838160405160200161240e929190613964565b604051602081830303815290604052805190602001209350612466565b808460405160200161243e929190613964565b6040516020818303038152906040528051906020012093506001836124639190613fb4565b92505b508080612472906141c5565b9150506123bd565b5085821481935093505050935093915050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b600081600001549050919050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b6000612528612522611f8f565b83612ae0565b9050919050565b600080600061254087878787612b13565b9150915061254d81612c20565b8192505050949350505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506125a7816124cb565b91506125b281612df5565b50919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b6000806000858054905090506000811461264a57856001826125fe9190614095565b8154811061260f5761260e614302565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661264d565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16925061267b83858763ffffffff16565b91506000811180156126ce575043866001836126979190614095565b815481106126a8576126a7614302565b5b9060005260206000200160000160009054906101000a900463ffffffff1663ffffffff16145b1561275b576126dc826119ab565b866001836126ea9190614095565b815481106126fb576126fa614302565b5b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555061284b565b85604051806040016040528061277043611a16565b63ffffffff168152602001612784856119ab565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b50935093915050565b505050565b612864838383611a69565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156128a55750600081115b15612a5d57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146129835760008061292c600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611a99856125dc565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612978929190613f2e565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612a5c57600080612a05600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611995856125dc565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612a51929190613f2e565b60405180910390a250505b5b505050565b60008383834630604051602001612a7d959493929190613abe565b6040516020818303038152906040528051906020012090509392505050565b60006002828418612aad919061400a565b828416612aba9190613fb4565b905092915050565b612acc8282612e0b565b612ada6008611a99836125dc565b50505050565b60008282604051602001612af5929190613990565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612b4e576000600391509150612c17565b601b8560ff1614158015612b665750601c8560ff1614155b15612b78576000600491509150612c17565b600060018787878760405160008152602001604052604051612b9d9493929190613b11565b6020604051602081039080840390855afa158015612bbf573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c0e57600060019250925050612c17565b80600092509250505b94509492505050565b60006004811115612c3457612c336142a4565b5b816004811115612c4757612c466142a4565b5b1415612c5257612df2565b60016004811115612c6657612c656142a4565b5b816004811115612c7957612c786142a4565b5b1415612cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb190613b78565b60405180910390fd5b60026004811115612cce57612ccd6142a4565b5b816004811115612ce157612ce06142a4565b5b1415612d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1990613c58565b60405180910390fd5b60036004811115612d3657612d356142a4565b5b816004811115612d4957612d486142a4565b5b1415612d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8190613d38565b60405180910390fd5b600480811115612d9d57612d9c6142a4565b5b816004811115612db057612daf6142a4565b5b1415612df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de890613d78565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7290613e38565b60405180910390fd5b612e8782600083612854565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0490613c18565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254612f649190614095565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612fc99190613f13565b60405180910390a3612fdd83600084612859565b505050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b60008135905061302f81614a21565b92915050565b60008083601f84011261304b5761304a614336565b5b8235905067ffffffffffffffff81111561306857613067614331565b5b6020830191508360208202830111156130845761308361433b565b5b9250929050565b60008135905061309a81614a38565b92915050565b6000813590506130af81614a4f565b92915050565b6000813590506130c481614a66565b92915050565b6000813590506130d981614a7d565b92915050565b6000602082840312156130f5576130f4614345565b5b600061310384828501613020565b91505092915050565b6000806040838503121561312357613122614345565b5b600061313185828601613020565b925050602061314285828601613020565b9150509250929050565b60008060006060848603121561316557613164614345565b5b600061317386828701613020565b935050602061318486828701613020565b9250506040613195868287016130a0565b9150509250925092565b600080600080600080600060e0888a0312156131be576131bd614345565b5b60006131cc8a828b01613020565b97505060206131dd8a828b01613020565b96505060406131ee8a828b016130a0565b95505060606131ff8a828b016130a0565b94505060806132108a828b016130ca565b93505060a06132218a828b0161308b565b92505060c06132328a828b0161308b565b91505092959891949750929550565b6000806040838503121561325857613257614345565b5b600061326685828601613020565b9250506020613277858286016130a0565b9150509250929050565b60008060008060008060c0878903121561329e5761329d614345565b5b60006132ac89828a01613020565b96505060206132bd89828a016130a0565b95505060406132ce89828a016130a0565b94505060606132df89828a016130ca565b93505060806132f089828a0161308b565b92505060a061330189828a0161308b565b9150509295509295509295565b6000806040838503121561332557613324614345565b5b600061333385828601613020565b9250506020613344858286016130b5565b9150509250929050565b60006020828403121561336457613363614345565b5b60006133728482850161308b565b91505092915050565b60006020828403121561339157613390614345565b5b600061339f848285016130a0565b91505092915050565b600080600080606085870312156133c2576133c1614345565b5b60006133d0878288016130a0565b94505060206133e187828801613020565b935050604085013567ffffffffffffffff81111561340257613401614340565b5b61340e87828801613035565b925092505092959194509250565b613425816140c9565b82525050565b61343c613437826140c9565b61420e565b82525050565b61344b816140db565b82525050565b61345a816140e7565b82525050565b61347161346c826140e7565b614220565b82525050565b600061348282613f8d565b61348c8185613f98565b935061349c818560208601614160565b6134a58161434a565b840191505092915050565b60006134bd601883613f98565b91506134c882614368565b602082019050919050565b60006134e0602383613f98565b91506134eb82614391565b604082019050919050565b6000613503601f83613f98565b915061350e826143e0565b602082019050919050565b6000613526601a83613f98565b915061353182614409565b602082019050919050565b6000613549601d83613f98565b915061355482614432565b602082019050919050565b600061356c602283613f98565b91506135778261445b565b604082019050919050565b600061358f601c83613f98565b915061359a826144aa565b602082019050919050565b60006135b2601f83613f98565b91506135bd826144d3565b602082019050919050565b60006135d5601983613f98565b91506135e0826144fc565b602082019050919050565b60006135f8602683613f98565b915061360382614525565b604082019050919050565b600061361b602283613f98565b915061362682614574565b604082019050919050565b600061363e600283613fa9565b9150613649826145c3565b600282019050919050565b6000613661601d83613f98565b915061366c826145ec565b602082019050919050565b6000613684601d83613f98565b915061368f82614615565b602082019050919050565b60006136a7602683613f98565b91506136b28261463e565b604082019050919050565b60006136ca602283613f98565b91506136d58261468d565b604082019050919050565b60006136ed601f83613f98565b91506136f8826146dc565b602082019050919050565b6000613710602283613f98565b915061371b82614705565b604082019050919050565b6000613733601e83613f98565b915061373e82614754565b602082019050919050565b6000613756603083613f98565b91506137618261477d565b604082019050919050565b6000613779602083613f98565b9150613784826147cc565b602082019050919050565b600061379c601c83613f98565b91506137a7826147f5565b602082019050919050565b60006137bf602783613f98565b91506137ca8261481e565b604082019050919050565b60006137e2602183613f98565b91506137ed8261486d565b604082019050919050565b6000613805602583613f98565b9150613810826148bc565b604082019050919050565b6000613828602683613f98565b91506138338261490b565b604082019050919050565b600061384b602483613f98565b91506138568261495a565b604082019050919050565b600061386e602583613f98565b9150613879826149a9565b604082019050919050565b6000613891601f83613f98565b915061389c826149f8565b602082019050919050565b6040820160008201516138bd600085018261390b565b5060208201516138d060208501826138d6565b50505050565b6138df81614111565b82525050565b6138ee81614139565b82525050565b61390561390082614139565b61423c565b82525050565b61391481614143565b82525050565b61392381614143565b82525050565b61393281614153565b82525050565b6000613944828561342b565b60148201915061395482846138f4565b6020820191508190509392505050565b60006139708285613460565b6020820191506139808284613460565b6020820191508190509392505050565b600061399b82613631565b91506139a78285613460565b6020820191506139b78284613460565b6020820191508190509392505050565b60006020820190506139dc600083018461341c565b92915050565b60006020820190506139f76000830184613442565b92915050565b6000602082019050613a126000830184613451565b92915050565b600060c082019050613a2d6000830189613451565b613a3a602083018861341c565b613a47604083018761341c565b613a5460608301866138e5565b613a6160808301856138e5565b613a6e60a08301846138e5565b979650505050505050565b6000608082019050613a8e6000830187613451565b613a9b602083018661341c565b613aa860408301856138e5565b613ab560608301846138e5565b95945050505050565b600060a082019050613ad36000830188613451565b613ae06020830187613451565b613aed6040830186613451565b613afa60608301856138e5565b613b07608083018461341c565b9695505050505050565b6000608082019050613b266000830187613451565b613b336020830186613929565b613b406040830185613451565b613b4d6060830184613451565b95945050505050565b60006020820190508181036000830152613b708184613477565b905092915050565b60006020820190508181036000830152613b91816134b0565b9050919050565b60006020820190508181036000830152613bb1816134d3565b9050919050565b60006020820190508181036000830152613bd1816134f6565b9050919050565b60006020820190508181036000830152613bf181613519565b9050919050565b60006020820190508181036000830152613c118161353c565b9050919050565b60006020820190508181036000830152613c318161355f565b9050919050565b60006020820190508181036000830152613c5181613582565b9050919050565b60006020820190508181036000830152613c71816135a5565b9050919050565b60006020820190508181036000830152613c91816135c8565b9050919050565b60006020820190508181036000830152613cb1816135eb565b9050919050565b60006020820190508181036000830152613cd18161360e565b9050919050565b60006020820190508181036000830152613cf181613654565b9050919050565b60006020820190508181036000830152613d1181613677565b9050919050565b60006020820190508181036000830152613d318161369a565b9050919050565b60006020820190508181036000830152613d51816136bd565b9050919050565b60006020820190508181036000830152613d71816136e0565b9050919050565b60006020820190508181036000830152613d9181613703565b9050919050565b60006020820190508181036000830152613db181613726565b9050919050565b60006020820190508181036000830152613dd181613749565b9050919050565b60006020820190508181036000830152613df18161376c565b9050919050565b60006020820190508181036000830152613e118161378f565b9050919050565b60006020820190508181036000830152613e31816137b2565b9050919050565b60006020820190508181036000830152613e51816137d5565b9050919050565b60006020820190508181036000830152613e71816137f8565b9050919050565b60006020820190508181036000830152613e918161381b565b9050919050565b60006020820190508181036000830152613eb18161383e565b9050919050565b60006020820190508181036000830152613ed181613861565b9050919050565b60006020820190508181036000830152613ef181613884565b9050919050565b6000604082019050613f0d60008301846138a7565b92915050565b6000602082019050613f2860008301846138e5565b92915050565b6000604082019050613f4360008301856138e5565b613f5060208301846138e5565b9392505050565b6000602082019050613f6c600083018461391a565b92915050565b6000602082019050613f876000830184613929565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613fbf82614139565b9150613fca83614139565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613fff57613ffe614246565b5b828201905092915050565b600061401582614139565b915061402083614139565b9250826140305761402f614275565b5b828204905092915050565b600061404682614139565b915061405183614139565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561408a57614089614246565b5b828202905092915050565b60006140a082614139565b91506140ab83614139565b9250828210156140be576140bd614246565b5b828203905092915050565b60006140d4826140f1565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60005b8381101561417e578082015181840152602081019050614163565b8381111561418d576000848401525b50505050565b600060028204905060018216806141ab57607f821691505b602082108114156141bf576141be6142d3565b5b50919050565b60006141d082614139565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561420357614202614246565b5b600182019050919050565b60006142198261422a565b9050919050565b6000819050919050565b60006142358261435b565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b7f484f503a2056616c69642070726f6f662072657175697265642e000000000000600082015250565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f484f503a204d65726b6c6520726f6f7420616c72656164792073657400000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f484f503a20436c61696d20706572696f64206e6f742079657420656e64656400600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f484f503a20546f6b656e7320616c726561647920636c61696d65642e00000000600082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b614a2a816140c9565b8114614a3557600080fd5b50565b614a41816140e7565b8114614a4c57600080fd5b50565b614a5881614139565b8114614a6357600080fd5b50565b614a6f81614143565b8114614a7a57600080fd5b50565b614a8681614153565b8114614a9157600080fd5b5056fea2646970667358221220f6ac0f9b7be284957c471924efd5c5c2c2364146e9216e4365ec0870f955dce864736f6c634300080700330000000000000000000000000000000000000000030dd5e3217b0bbfacdaca690000000000000000000000000000000000000000002d58597e55747d3b253597000000000000000000000000000000000000000000000000000000006392c0d0",
         "contractAddress":"0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc",
         "cumulativeGasUsed":"10450178",
         "gasUsed":"4457269",
         "confirmations":"122485",
         "methodId":"0x61016060",
         "functionName":""
      },
      {
         "blockNumber":"14923692",
         "timeStamp":"1654646570",
         "hash":"0xaa45b4858ba44230a5fce5a29570a5dec2bf1f0ba95bacdec4fe8f2c4fa99338",
         "nonce":"7",
         "blockHash":"0x8df71a12a8c06b36c06c26bf6248857dd2a2b75b6edbb4e33e9477078897b282",
         "transactionIndex":"27",
         "from":"0x9aa99c23f67c81701c772b106b4f83f6e858dd2e",
         "to":"0xc5102fe9359fd9a28f877a67e36b0f050d81a3cc",
         "value":"0",
         "gas":"6000000",
         "gasPrice":"125521409858",
         "isError":"0",
         "txreceipt_status":"1",
         "input":"0xa9059cbb000000000000000000000000313143c4088a47c469d06fe3fa5fd4196be6a4d600000000000000000000000000000000000000000003b8e97d229a2d54800000",
         "contractAddress":"",
         "cumulativeGasUsed":"1977481",
         "gasUsed":"57168",
         "confirmations":"122471",
         "methodId":"0xa9059cbb",
         "functionName":"transfer(address _to, uint256 _value)"
      }
   ]
}
```

/$
## Get a list of 'Internal' Transactions by Address
Returns the list of internal transactions performed by an address, with optional pagination.

üìù Note : This API endpoint returns a maximum of 10000 records only.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlistinternal
   &address=0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3
   &startblock=0
   &endblock=2702578
   &page=1
   &offset=10
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the addresses to check for balance

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

üí° Tip: Specify a smaller startblock and endblock range for faster search results

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"2535368",
         "timeStamp":"1477837690",
         "hash":"0x8a1a9989bda84f80143181a68bc137ecefa64d0d4ebde45dd94fc0cf49e70cb6",
         "from":"0x20d42f2e99a421147acf198d775395cac2e8b03d",
         "to":"",
         "value":"0",
         "contractAddress":"0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3",
         "input":"",
         "type":"create",
         "gas":"254791",
         "gasUsed":"46750",
         "traceId":"0",
         "isError":"0",
         "errCode":""
      },
      {
         "blockNumber":"2535479",
         "timeStamp":"1477839134",
         "hash":"0x1a50f1dc0bc912745f7d09b988669f71d199719e2fb7592c2074ede9578032d0",
         "from":"0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3",
         "to":"0x20d42f2e99a421147acf198d775395cac2e8b03d",
         "value":"100000000000000000",
         "contractAddress":"",
         "input":"",
         "type":"call",
         "gas":"235231",
         "gasUsed":"0",
         "traceId":"0",
         "isError":"0",
         "errCode":""
      }
   ]
}
```

/$
## Get 'Internal Transactions' by Transaction Hash
Returns the list of internal transactions performed within a transaction.

üìù Note : This API endpoint returns a maximum of 10000 records only.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlistinternal
   &txhash=0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontxhash

the string representing the transaction hash to check for internal transactions

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"1743059",
         "timeStamp":"1466489498",
         "from":"0x2cac6e4b11d6b58f6d3c1c9d5fe8faa89f60e5a2",
         "to":"0x66a1c3eaf0f1ffc28d209c0763ed0ca614f3b002",
         "value":"7106740000000000",
         "contractAddress":"",
         "input":"",
         "type":"call",
         "gas":"2300",
         "gasUsed":"0",
         "isError":"0",
         "errCode":""
      }
   ]
}
```

/$The isError field returns 0 for successful transactions and 1 for rejected/cancelled transactions.

## Get "Internal Transactions" by Block Range
Returns the list of internal transactions performed within a block range, with optional pagination.

‚Äã‚Äã üìù Note : This API endpoint returns a maximum of 10000 records only.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlistinternal
   &startblock=13481773
   &endblock=13491773
   &page=1
   &offset=10
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"50107",
         "timeStamp":"1438984016",
         "hash":"0x3f97c969ddf71f515ce5373b1f8e76e9fd7016611d8ce455881009414301789e",
         "from":"0x109c4f2ccc82c4d77bde15f306707320294aea3f",
         "to":"0x881b0a4e9c55d08e31d8d3c022144d75a454211c",
         "value":"1000000000000000000",
         "contractAddress":"",
         "input":"",
         "type":"call",
         "gas":"2300",
         "gasUsed":"0",
         "traceId":"0",
         "isError":"1",
         "errCode":""
      },
      {
         "blockNumber":"50111",
         "timeStamp":"1438984075",
         "hash":"0x893c428fed019404f704cf4d9be977ed9ca01050ed93dccdd6c169422155586f",
         "from":"0x109c4f2ccc82c4d77bde15f306707320294aea3f",
         "to":"0x881b0a4e9c55d08e31d8d3c022144d75a454211c",
         "value":"1000000000000000000",
         "contractAddress":"",
         "input":"",
         "type":"call",
         "gas":"2300",
         "gasUsed":"0",
         "traceId":"0",
         "isError":"0",
         "errCode":""
      }
   ]
}
```

/$The isError field returns 0 for successful transactions and 1 for rejected/cancelled transactions.

## Get a list of 'ERC20 - Token Transfer Events' by Address
Returns the list of ERC-20 tokens transferred by an address, with optional filtering by token contract.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=tokentx
   &contractaddress=0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2
   &address=0x4e83362442b8d1bec281594cea3050c8eb01311c
   &page=1
   &offset=100
   &startblock=0
   &endblock=27025780
   &sort=asc
   &apikey=YourApiKeyToken
```

/$Usage:

‚Ä¢ ERC-20 transfers from an address, specify the address parameter
‚Ä¢ ERC-20 transfers from a contract address, specify the contract address parameter
‚Ä¢ ERC-20 transfers from an address filtered by a token contract, specify both address and contract address parameters.

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

contractaddress

the string representing the token contract address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"4730207",
         "timeStamp":"1513240363",
         "hash":"0xe8c208398bd5ae8e4c237658580db56a2a94dfa0ca382c99b776fa6e7d31d5b4",
         "nonce":"406",
         "blockHash":"0x022c5e6a3d2487a8ccf8946a2ffb74938bf8e5c8a3f6d91b41c56378a96b5c37",
         "from":"0x642ae78fafbb8032da552d619ad43f1d81e4dd7c",
         "contractAddress":"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
         "to":"0x4e83362442b8d1bec281594cea3050c8eb01311c",
         "value":"5901522149285533025181",
         "tokenName":"Maker",
         "tokenSymbol":"MKR",
         "tokenDecimal":"18",
         "transactionIndex":"81",
         "gas":"940000",
         "gasPrice":"32010000000",
         "gasUsed":"77759",
         "cumulativeGasUsed":"2523379",
         "input":"deprecated",
         "confirmations":"7968350"
      },
      {
         "blockNumber":"4764973",
         "timeStamp":"1513764636",
         "hash":"0x9c82e89b7f6a4405d11c361adb6d808d27bcd9db3b04b3fb3bc05d182bbc5d6f",
         "nonce":"428",
         "blockHash":"0x87a4d04a6d8fce7a149e9dc528b88dc0c781a87456910c42984bdc15930a2cac",
         "from":"0x4e83362442b8d1bec281594cea3050c8eb01311c",
         "contractAddress":"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
         "to":"0x69076e44a9c70a67d5b79d95795aba299083c275",
         "value":"132520488141080",
         "tokenName":"Maker",
         "tokenSymbol":"MKR",
         "tokenDecimal":"18",
         "transactionIndex":"167",
         "gas":"940000",
         "gasPrice":"35828000000",
         "gasUsed":"127593",
         "cumulativeGasUsed":"6315818",
         "input":"deprecated",
         "confirmations":"7933584"
      }
   ]
}
```

/$
## Get a list of 'ERC721 - Token Transfer Events' by Address
Returns the list of ERC-721 ( NFT ) tokens transferred by an address, with optional filtering by token contract.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=tokennfttx
   &contractaddress=0x06012c8cf97bead5deae237070f9587f8e7a266d
   &address=0x6975be450864c02b4613023c2152ee0743572325
   &page=1
   &offset=100
   &startblock=0
   &endblock=27025780
   &sort=asc
   &apikey=YourApiKeyToken
```

/$Usage:

‚Ä¢ ERC-721 transfers from an address, specify the address parameter
‚Ä¢ ERC-721 transfers from a contract address, specify the contract address parameter
‚Ä¢ ERC-721 transfers from an address filtered by a token contract, specify both address and contract address parameters.

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

contractaddress

the string representing the token contract address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"4708120",
         "timeStamp":"1512907118",
         "hash":"0x031e6968a8de362e4328d60dcc7f72f0d6fc84284c452f63176632177146de66",
         "nonce":"0",
         "blockHash":"0x4be19c278bfaead5cb0bc9476fa632e2447f6e6259e0303af210302d22779a24",
         "from":"0xb1690c08e213a35ed9bab7b318de14420fb57d8c",
         "contractAddress":"0x06012c8cf97bead5deae237070f9587f8e7a266d",
         "to":"0x6975be450864c02b4613023c2152ee0743572325",
         "tokenID":"202106",
         "tokenName":"CryptoKitties",
         "tokenSymbol":"CK",
         "tokenDecimal":"0",
         "transactionIndex":"81",
         "gas":"158820",
         "gasPrice":"40000000000",
         "gasUsed":"60508",
         "cumulativeGasUsed":"4880352",
         "input":"deprecated",
         "confirmations":"7990490"
      },
      {
         "blockNumber":"4708161",
         "timeStamp":"1512907756",
         "hash":"0x9626e7064b68b5463cf677e10815a0b394645a0bfa245f26a2de6074324e83ff",
         "nonce":"1",
         "blockHash":"0xe1c6cbc39a723496f4cbc3e70241012854f2e88b4d2d5f339d8f0a4a1cc406d8",
         "from":"0xb1690c08e213a35ed9bab7b318de14420fb57d8c",
         "contractAddress":"0x06012c8cf97bead5deae237070f9587f8e7a266d",
         "to":"0x6975be450864c02b4613023c2152ee0743572325",
         "tokenID":"147739",
         "tokenName":"CryptoKitties",
         "tokenSymbol":"CK",
         "tokenDecimal":"0",
         "transactionIndex":"41",
         "gas":"135963",
         "gasPrice":"40000000000",
         "gasUsed":"45508",
         "cumulativeGasUsed":"3359342",
         "input":"deprecated",
         "confirmations":"7990449"
      }
   ]
}
```

/$
## Get a list of 'ERC1155 - Token Transfer Events' by Address
Returns the list of ERC-1155 ( Multi Token Standard ) tokens transferred by an address, with optional filtering by token contract.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=token1155tx
   &contractaddress=0x76be3b62873462d2142405439777e971754e8e77
   &address=0x83f564d180b58ad9a02a449105568189ee7de8cb
   &page=1
   &offset=100
   &startblock=0
   &endblock=99999999
   &sort=asc
   &apikey=YourApiKeyToken
```

/$Usage:

‚Ä¢ ERC-1155 transfers from an address, specify the address parameter
‚Ä¢ ERC-1155 transfers from a contract address, specify the contract address parameter
‚Ä¢ ERC-1155 transfers from an address filtered by a token contract, specify both address and contract address parameters.

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

contractaddress

the string representing the token contract address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"13472395",
         "timeStamp":"1634973285",
         "hash":"0x643b15f3ffaad5d38e33e5872b4ebaa7a643eda8b50ffd5331f682934ee65d4d",
         "nonce":"41",
         "blockHash":"0xa5da536dfbe8125eb146114e2ee0d0bdef2b20483aacbf30fed6b60f092059e6",
         "transactionIndex":"100",
         "gas":"140000",
         "gasPrice":"52898577246",
         "gasUsed":"105030",
         "cumulativeGasUsed":"11739203",
         "input":"deprecated",
         "contractAddress":"0x76be3b62873462d2142405439777e971754e8e77",
         "from":"0x1e63326a84d2fa207bdfa856da9278a93deba418",
         "to":"0x83f564d180b58ad9a02a449105568189ee7de8cb",
         "tokenID":"10371",
         "tokenValue":"1",
         "tokenName":"parallel",
         "tokenSymbol":"LL",
         "confirmations":"1447769"
      },
      {
         "blockNumber":"14049909",
         "timeStamp":"1642781541",
         "hash":"0x58353aab15a4b5a77333b87619edaa749c7f3cf8bb2263a1c0865d73bf1264bd",
         "nonce":"4",
         "blockHash":"0x1e88a63a4cb4086a747644b8ab7ff3434540930f3029eacb8add08b15974fdc9",
         "transactionIndex":"114",
         "gas":"253032",
         "gasPrice":"225052869211",
         "gasUsed":"184899",
         "cumulativeGasUsed":"6855790",
         "input":"deprecated",
         "contractAddress":"0x76be3b62873462d2142405439777e971754e8e77",
         "from":"0x83f564d180b58ad9a02a449105568189ee7de8cb",
         "to":"0x80833dc92d326a81d0cb74982a8e6f1a3887f837",
         "tokenID":"10371",
         "tokenValue":"1",
         "tokenName":"parallel",
         "tokenSymbol":"LL",
         "confirmations":"870255"
      },
      {
         "blockNumber":"14067255",
         "timeStamp":"1643012777",
         "hash":"0x3222b5f71e577c2551e17701eaf39b308b976bbe6bf6ce3f8c20549527b9d6ae",
         "nonce":"7",
         "blockHash":"0x236cfed8b42fa6cb8956f6e7b889797047d9af0883066b1f3be8284beda16e17",
         "transactionIndex":"172",
         "gas":"56873",
         "gasPrice":"69434775835",
         "gasUsed":"52073",
         "cumulativeGasUsed":"17181952",
         "input":"deprecated",
         "contractAddress":"0x76be3b62873462d2142405439777e971754e8e77",
         "from":"0x9d48305f859a0006b57da25c80af62ecb8e5c6a2",
         "to":"0x83f564d180b58ad9a02a449105568189ee7de8cb",
         "tokenID":"10372",
         "tokenValue":"1",
         "tokenName":"parallel",
         "tokenSymbol":"LL",
         "confirmations":"852909"
      }
   ]
}
```

/$
## Get Address Funded By
Returns the address that funded an address, and its relative age.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=fundedby
   &address=0x8f5419c8797cbdecaf3f2f1910d192f4306d527d
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

address

the string representing the address that received funding

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "block":8665142,
      "timeStamp":"1704119631",
      "fundingAddress":"0xcb566e3b6934fa77258d68ea18e931fa75e1aaaa",
      "fundingTxn":"0x495cdddefc559eb5928589c0bd8070e8182ff0aed082bde3cd6fbd78431ca278",
      "value":"500000000000000"
   }
}
```

/$
## Get list of Blocks Validated by Address
Returns the list of blocks validated by an address.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=getminedblocks
   &address=0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b
   &blocktype=blocks
   &page=1
   &offset=10
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

blocktype

the string pre-defined block type, either blocks for canonical blocks or uncles for uncle blocks only

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"3462296",
         "timeStamp":"1491118514",
         "blockReward":"5194770940000000000"
      },
      {
         "blockNumber":"2691400",
         "timeStamp":"1480072029",
         "blockReward":"5086562212310617100"
      },
      {
         "blockNumber":"2687700",
         "timeStamp":"1480018852",
         "blockReward":"5003251945421042780"
      }
   ]
}
```

/$‚è≥ Note : The timeStamp is represented in Unix timestamp. ****

## Get Beacon Chain Withdrawals by Address and Block Range
Returns the beacon chain withdrawals made to an address.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txsBeaconWithdrawal
   &address=0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f
   &startblock=0
   &endblock=99999999
   &page=1
   &offset=100
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for beacon withdrawals

contractaddress

the string representing the token contract address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

startblock

the integer block number to start searching for transactions

endblock

the integer block number to stop searching for transactions

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "withdrawalIndex":"13",
         "validatorIndex":"117823",
         "address":"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
         "amount":"3402931175",
         "blockNumber":"17034877",
         "timestamp":"1681338599"
      },
      {
         "withdrawalIndex":"14",
         "validatorIndex":"119023",
         "address":"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
         "amount":"3244098967",
         "blockNumber":"17034877",
         "timestamp":"1681338599"
      }
   ]
}
```

/$
## Get Historical Ether Balance for a Single Address By BlockNo
Returns the balance of an address at a certain block height.

üìù Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=balancehistory
   &address=0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae
   &blockno=8000000
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

blockno

the integer block number to check balance for eg. 12697906

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"610538078574759898951277"
}
```

/$üìñ Tip: The result field is denoted in wei.

/$[PreviousAccounting/Taxes](/use-cases/accounting-taxes)[NextContracts](/api-endpoints/contracts)Last updated 23 days ago

================================================================================

# Contracts

Source: https://docs.etherscan.io/api-endpoints/contracts
Extraction Method: playwright
Components: code_block(18)

Copy
1. üéØAPI Endpoints

# Contracts
$
## Get Contract ABI for Verified Contract Source Codes
Returns the Contract Application Binary Interface ( ABI ) of a verified smart contract.

Find verified contracts ‚úÖon our Verified Contracts Source Code page.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=getabi
   &address=0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the contract address that has a verified source code

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"newCurator\",\"type\":\"bool\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"divisor\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extraBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockMe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualBalance\",\"outputs\":[{\"name\":\"_actualBalance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"},{\"name\":\"_debatingPeriod\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"bool\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOpaidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"newContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeAllowedRecipients\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halveMinQuorum\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"splitDAO\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAOrewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"_numberOfProposals\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeMinQuorumMet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toMembers\",\"type\":\"bool\"}],\"name\":\"retrieveDAOReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFueled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTokenProxy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getNewDAOAddress\",\"outputs\":[{\"name\":\"_newDAO\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"_voteID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"}],\"name\":\"changeProposalDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"_codeChecksOut\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCreation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_curator\",\"type\":\"address\"},{\"name\":\"_daoCreator\",\"type\":\"address\"},{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"_minTokensToCreate\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_privateCreation\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FuelingToDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCurator\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"NewCurator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"AllowedRecipientChanged\",\"type\":\"event\"}]"
}
```

## Get Contract Source Code for Verified Contract Source Codes
Returns the Solidity source code of a verified smart contract.

üì© Tip : You can also download a CSV list of verified contracts addresses of which the code publishers have provided a corresponding Open Source license for redistribution.

> Try this endpoint in your browser üîó

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=getsourcecode
   &address=0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413
   &apikey=YourApiKeyToken
```

/$RequestResponseQuery Parameters

ParameterDescriptionaddress

the contract address that has a verified source code

Sample Response

For Similar Match contracts, the contract must be updated to Full Match to view constructor arguments ‚úÖ

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "SourceCode":"/*\n\n- Bytecode Verification performed was compared on second iteration -\n\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic, standardized Token contract with no \"premine\". Defines the functions to\ncheck token balances, send tokens, send tokens on behalf of a 3rd party and the\ncorresponding approval process. Tokens need to be created by a derived\ncontract (e.g. TokenCreation.sol).\n\nThank you ConsenSys, this contract originated from:\nhttps://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Standard_Token.sol\nWhich is itself based on the Ethereum standardized contract APIs:\nhttps://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs\n*/\n\n/// @title Standard Token Contract.\n\ncontract TokenInterface {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /// Total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`\n    /// @param _from The address of the origin of the transfer\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    /// its behalf\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _amount) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    /// to spend\n    function allowance(\n        address _owner,\n        address _spender\n    ) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n    );\n}\n\n\ncontract Token is TokenInterface {\n    // Protects users by preventing the execution of method calls that\n    // inadvertently also transferred ether\n    modifier noEther() {if (msg.value > 0) throw; _}\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) noEther returns (bool success) {\n        if (balances[msg.sender] >= _amount && _amount > 0) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n           return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) noEther returns (bool success) {\n\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0) {\n\n            balances[_to] += _amount;\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nBasic account, used by the DAO contract to separately manage both the rewards \nand the extraBalance accounts. \n*/\n\ncontract ManagedAccountInterface {\n    // The only address with permission to withdraw from this account\n    address public owner;\n    // If true, only the owner of the account can receive ether from it\n    bool public payOwnerOnly;\n    // The sum of ether (in wei) which has been sent to this contract\n    uint public accumulatedInput;\n\n    /// @notice Sends `_amount` of wei to _recipient\n    /// @param _amount The amount of wei to send to `_recipient`\n    /// @param _recipient The address to receive `_amount` of wei\n    /// @return True if the send completed\n    function payOut(address _recipient, uint _amount) returns (bool);\n\n    event PayOut(address indexed _recipient, uint _amount);\n}\n\n\ncontract ManagedAccount is ManagedAccountInterface{\n\n    // The constructor sets the owner of the account\n    function ManagedAccount(address _owner, bool _payOwnerOnly) {\n        owner = _owner;\n        payOwnerOnly = _payOwnerOnly;\n    }\n\n    // When the contract receives a transaction without data this is called. \n    // It counts the amount of ether it receives and stores it in \n    // accumulatedInput.\n    function() {\n        accumulatedInput += msg.value;\n    }\n\n    function payOut(address _recipient, uint _amount) returns (bool) {\n        if (msg.sender != owner || msg.value > 0 || (payOwnerOnly && _recipient != owner))\n            throw;\n        if (_recipient.call.value(_amount)()) {\n            PayOut(_recipient, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\n * Token Creation contract, used by the DAO to create its tokens and initialize\n * its ether. Feel free to modify the divisor method to implement different\n * Token Creation parameters\n*/\n\n\ncontract TokenCreationInterface {\n\n    // End of token creation, in Unix time\n    uint public closingTime;\n    // Minimum fueling goal of the token creation, denominated in tokens to\n    // be created\n    uint public minTokensToCreate;\n    // True if the DAO reached its minimum fueling goal, false otherwise\n    bool public isFueled;\n    // For DAO splits - if privateCreation is 0, then it is a public token\n    // creation, otherwise only the address stored in privateCreation is\n    // allowed to create tokens\n    address public privateCreation;\n    // hold extra ether which has been sent after the DAO token\n    // creation rate has increased\n    ManagedAccount public extraBalance;\n    // tracks the amount of wei given from each contributor (used for refund)\n    mapping (address => uint256) weiGiven;\n\n    /// @dev Constructor setting the minimum fueling goal and the\n    /// end of the Token Creation\n    /// @param _minTokensToCreate Minimum fueling goal in number of\n    ///        Tokens to be created\n    /// @param _closingTime Date (in Unix time) of the end of the Token Creation\n    /// @param _privateCreation Zero means that the creation is public.  A\n    /// non-zero address represents the only address that can create Tokens\n    /// (the address can also create Tokens on behalf of other accounts)\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function TokenCreation(\n        //  uint _minTokensTocreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `_tokenHolder` as the initial owner of the Token\n    /// @param _tokenHolder The address of the Tokens's recipient\n    /// @return Whether the token creation was successful\n    function createTokenProxy(address _tokenHolder) returns (bool success);\n\n    /// @notice Refund `msg.sender` in the case the Token Creation did\n    /// not reach its minimum fueling goal\n    function refund();\n\n    /// @return The divisor used to calculate the token creation rate during\n    /// the creation phase\n    function divisor() constant returns (uint divisor);\n\n    event FuelingToDate(uint value);\n    event CreatedToken(address indexed to, uint amount);\n    event Refund(address indexed to, uint value);\n}\n\n\ncontract TokenCreation is TokenCreationInterface, Token {\n    function TokenCreation(\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation) {\n\n        closingTime = _closingTime;\n        minTokensToCreate = _minTokensToCreate;\n        privateCreation = _privateCreation;\n        extraBalance = new ManagedAccount(address(this), true);\n    }\n\n    function createTokenProxy(address _tokenHolder) returns (bool success) {\n        if (now < closingTime && msg.value > 0\n            && (privateCreation == 0 || privateCreation == msg.sender)) {\n\n            uint token = (msg.value * 20) / divisor();\n            extraBalance.call.value(msg.value - token)();\n            balances[_tokenHolder] += token;\n            totalSupply += token;\n            weiGiven[_tokenHolder] += msg.value;\n            CreatedToken(_tokenHolder, token);\n            if (totalSupply >= minTokensToCreate && !isFueled) {\n                isFueled = true;\n                FuelingToDate(totalSupply);\n            }\n            return true;\n        }\n        throw;\n    }\n\n    function refund() noEther {\n        if (now > closingTime && !isFueled) {\n            // Get extraBalance - will only succeed when called for the first time\n            if (extraBalance.balance >= extraBalance.accumulatedInput())\n                extraBalance.payOut(address(this), extraBalance.accumulatedInput());\n\n            // Execute refund\n            if (msg.sender.call.value(weiGiven[msg.sender])()) {\n                Refund(msg.sender, weiGiven[msg.sender]);\n                totalSupply -= balances[msg.sender];\n                balances[msg.sender] = 0;\n                weiGiven[msg.sender] = 0;\n            }\n        }\n    }\n\n    function divisor() constant returns (uint divisor) {\n        // The number of (base unit) tokens per wei is calculated\n        // as `msg.value` * 20 / `divisor`\n        // The fueling period starts with a 1:1 ratio\n        if (closingTime - 2 weeks > now) {\n            return 20;\n        // Followed by 10 days with a daily creation rate increase of 5%\n        } else if (closingTime - 4 days > now) {\n            return (20 + (now - (closingTime - 2 weeks)) / (1 days));\n        // The last 4 days there is a constant creation rate ratio of 1:1.5\n        } else {\n            return 30;\n        }\n    }\n}\n/*\nThis file is part of the DAO.\n\nThe DAO is free software: you can redistribute it and/or modify\nit under the terms of the GNU lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe DAO is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU lesser General Public License for more details.\n\nYou should have received a copy of the GNU lesser General Public License\nalong with the DAO.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n/*\nStandard smart contract for a Decentralized Autonomous Organization (DAO)\nto automate organizational governance and decision-making.\n*/\n\n\ncontract DAOInterface {\n\n    // The amount of days for which people who try to participate in the\n    // creation by calling the fallback function will still get their ether back\n    uint constant creationGracePeriod = 40 days;\n    // The minimum debate period that a generic proposal can have\n    uint constant minProposalDebatePeriod = 2 weeks;\n    // The minimum debate period that a split proposal can have\n    uint constant minSplitDebatePeriod = 1 weeks;\n    // Period of days inside which it's possible to execute a DAO split\n    uint constant splitExecutionPeriod = 27 days;\n    // Period of time after which the minimum Quorum is halved\n    uint constant quorumHalvingPeriod = 25 weeks;\n    // Period after which a proposal is closed\n    // (used in the case `executeProposal` fails because it throws)\n    uint constant executeProposalPeriod = 10 days;\n    // Denotes the maximum proposal deposit that can be given. It is given as\n    // a fraction of total Ether spent plus balance of the DAO\n    uint constant maxDepositDivisor = 100;\n\n    // Proposals to spend the DAO's ether or to choose a new Curator\n    Proposal[] public proposals;\n    // The quorum needed for each proposal is partially calculated by\n    // totalSupply / minQuorumDivisor\n    uint public minQuorumDivisor;\n    // The unix time of the last time quorum was reached on a proposal\n    uint  public lastTimeMinQuorumMet;\n\n    // Address of the curator\n    address public curator;\n    // The whitelist: List of addresses the DAO is allowed to send ether to\n    mapping (address => bool) public allowedRecipients;\n\n    // Tracks the addresses that own Reward Tokens. Those addresses can only be\n    // DAOs that have split from the original DAO. Conceptually, Reward Tokens\n    // represent the proportion of the rewards that the DAO has the right to\n    // receive. These Reward Tokens are generated when the DAO spends ether.\n    mapping (address => uint) public rewardToken;\n    // Total supply of rewardToken\n    uint public totalRewardToken;\n\n    // The account used to manage the rewards which are to be distributed to the\n    // DAO Token Holders of this DAO\n    ManagedAccount public rewardAccount;\n\n    // The account used to manage the rewards which are to be distributed to\n    // any DAO that holds Reward Tokens\n    ManagedAccount public DAOrewardAccount;\n\n    // Amount of rewards (in wei) already paid out to a certain DAO\n    mapping (address => uint) public DAOpaidOut;\n\n    // Amount of rewards (in wei) already paid out to a certain address\n    mapping (address => uint) public paidOut;\n    // Map of addresses blocked during a vote (not allowed to transfer DAO\n    // tokens). The address points to the proposal ID.\n    mapping (address => uint) public blocked;\n\n    // The minimum deposit (in wei) required to submit any proposal that is not\n    // requesting a new Curator (no deposit is required for splits)\n    uint public proposalDeposit;\n\n    // the accumulated sum of all current proposal deposits\n    uint sumOfProposalDeposits;\n\n    // Contract that is able to create a new DAO (with the same code as\n    // this one), used for splits\n    DAO_Creator public daoCreator;\n\n    // A proposal with `newCurator == false` represents a transaction\n    // to be issued by this DAO\n    // A proposal with `newCurator == true` represents a DAO split\n    struct Proposal {\n        // The address where the `amount` will go to if the proposal is accepted\n        // or if `newCurator` is true, the proposed Curator of\n        // the new DAO).\n        address recipient;\n        // The amount to transfer to `recipient` if the proposal is accepted.\n        uint amount;\n        // A plain text description of the proposal\n        string description;\n        // A unix timestamp, denoting the end of the voting period\n        uint votingDeadline;\n        // True if the proposal's votes have yet to be counted, otherwise False\n        bool open;\n        // True if quorum has been reached, the votes have been counted, and\n        // the majority said yes\n        bool proposalPassed;\n        // A hash to check validity of a proposal\n        bytes32 proposalHash;\n        // Deposit in wei the creator added when submitting their proposal. It\n        // is taken from the msg.value of a newProposal call.\n        uint proposalDeposit;\n        // True if this proposal is to assign a new Curator\n        bool newCurator;\n        // Data needed for splitting the DAO\n        SplitData[] splitData;\n        // Number of Tokens in favor of the proposal\n        uint yea;\n        // Number of Tokens opposed to the proposal\n        uint nay;\n        // Simple mapping to check if a shareholder has voted for it\n        mapping (address => bool) votedYes;\n        // Simple mapping to check if a shareholder has voted against it\n        mapping (address => bool) votedNo;\n        // Address of the shareholder who created the proposal\n        address creator;\n    }\n\n    // Used only in the case of a newCurator proposal.\n    struct SplitData {\n        // The balance of the current DAO minus the deposit at the time of split\n        uint splitBalance;\n        // The total amount of DAO Tokens in existence at the time of split.\n        uint totalSupply;\n        // Amount of Reward Tokens owned by the DAO at the time of split.\n        uint rewardToken;\n        // The new DAO contract created at the time of split.\n        DAO newDAO;\n    }\n\n    // Used to restrict access to certain functions to only DAO Token Holders\n    modifier onlyTokenholders {}\n\n    /// @dev Constructor setting the Curator and the address\n    /// for the contract able to create another DAO as well as the parameters\n    /// for the DAO Token Creation\n    /// @param _curator The Curator\n    /// @param _daoCreator The contract able to (re)create this DAO\n    /// @param _proposalDeposit The deposit to be paid for a regular proposal\n    /// @param _minTokensToCreate Minimum required wei-equivalent tokens\n    ///        to be created for a successful DAO Token Creation\n    /// @param _closingTime Date (in Unix time) of the end of the DAO Token Creation\n    /// @param _privateCreation If zero the DAO Token Creation is open to public, a\n    /// non-zero address means that the DAO Token Creation is only for the address\n    // This is the constructor: it can not be overloaded so it is commented out\n    //  function DAO(\n        //  address _curator,\n        //  DAO_Creator _daoCreator,\n        //  uint _proposalDeposit,\n        //  uint _minTokensToCreate,\n        //  uint _closingTime,\n        //  address _privateCreation\n    //  );\n\n    /// @notice Create Token with `msg.sender` as the beneficiary\n    /// @return Whether the token creation was successful\n    function () returns (bool success);\n\n\n    /// @dev This function is used to send ether back\n    /// to the DAO, it can also be used to receive payments that should not be\n    /// counted as rewards (donations, grants, etc.)\n    /// @return Whether the DAO received the ether successfully\n    function receiveEther() returns(bool);\n\n    /// @notice `msg.sender` creates a proposal to send `_amount` Wei to\n    /// `_recipient` with the transaction data `_transactionData`. If\n    /// `_newCurator` is true, then this is a proposal that splits the\n    /// DAO and sets `_recipient` as the new DAO's Curator.\n    /// @param _recipient Address of the recipient of the proposed transaction\n    /// @param _amount Amount of wei to be sent with the proposed transaction\n    /// @param _description String describing the proposal\n    /// @param _transactionData Data of the proposed transaction\n    /// @param _debatingPeriod Time used for debating a proposal, at least 2\n    /// weeks for a regular proposal, 10 days for new Curator proposal\n    /// @param _newCurator Bool defining whether this proposal is about\n    /// a new Curator or not\n    /// @return The proposal ID. Needed for voting on the proposal\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID);\n\n    /// @notice Check that the proposal with the ID `_proposalID` matches the\n    /// transaction which sends `_amount` with data `_transactionData`\n    /// to `_recipient`\n    /// @param _proposalID The proposal ID\n    /// @param _recipient The recipient of the proposed transaction\n    /// @param _amount The amount of wei to be sent in the proposed transaction\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposal ID matches the transaction data or not\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) constant returns (bool _codeChecksOut);\n\n    /// @notice Vote on proposal `_proposalID` with `_supportsProposal`\n    /// @param _proposalID The proposal ID\n    /// @param _supportsProposal Yes/No - support of the proposal\n    /// @return The vote ID.\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders returns (uint _voteID);\n\n    /// @notice Checks whether proposal `_proposalID` with transaction data\n    /// `_transactionData` has been voted for or rejected, and executes the\n    /// transaction in the case it has been voted for.\n    /// @param _proposalID The proposal ID\n    /// @param _transactionData The data of the proposed transaction\n    /// @return Whether the proposed transaction has been executed or not\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) returns (bool _success);\n\n    /// @notice ATTENTION! I confirm to move my remaining ether to a new DAO\n    /// with `_newCurator` as the new Curator, as has been\n    /// proposed in proposal `_proposalID`. This will burn my tokens. This can\n    /// not be undone and will split the DAO into two DAO's, with two\n    /// different underlying tokens.\n    /// @param _proposalID The proposal ID\n    /// @param _newCurator The new Curator of the new DAO\n    /// @dev This function, when called for the first time for this proposal,\n    /// will create a new DAO and send the sender's portion of the remaining\n    /// ether and Reward Tokens to the new DAO. It will also burn the DAO Tokens\n    /// of the sender.\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) returns (bool _success);\n\n    /// @dev can only be called by the DAO itself through a proposal\n    /// updates the contract of the DAO by sending all ether and rewardTokens\n    /// to the new DAO. The new DAO needs to be approved by the Curator\n    /// @param _newContract the address of the new contract\n    function newContract(address _newContract);\n\n\n    /// @notice Add a new possible recipient `_recipient` to the whitelist so\n    /// that the DAO can send transactions to them (using proposals)\n    /// @param _recipient New recipient address\n    /// @dev Can only be called by the current Curator\n    /// @return Whether successful or not\n    function changeAllowedRecipients(address _recipient, bool _allowed) external returns (bool _success);\n\n\n    /// @notice Change the minimum deposit required to submit a proposal\n    /// @param _proposalDeposit The new proposal deposit\n    /// @dev Can only be called by this DAO (through proposals with the\n    /// recipient being this DAO itself)\n    function changeProposalDeposit(uint _proposalDeposit) external;\n\n    /// @notice Move rewards from the DAORewards managed account\n    /// @param _toMembers If true rewards are moved to the actual reward account\n    ///                   for the DAO. If not then it's moved to the DAO itself\n    /// @return Whether the call was successful\n    function retrieveDAOReward(bool _toMembers) external returns (bool _success);\n\n    /// @notice Get my portion of the reward that was sent to `rewardAccount`\n    /// @return Whether the call was successful\n    function getMyReward() returns(bool _success);\n\n    /// @notice Withdraw `_account`'s portion of the reward from `rewardAccount`\n    /// to `_account`'s balance\n    /// @return Whether the call was successful\n    function withdrawRewardFor(address _account) internal returns (bool _success);\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`. Prior to this\n    /// getMyReward() is called.\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferWithoutReward(address _to, uint256 _amount) returns (bool success);\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    /// is approved by `_from`. Prior to this getMyReward() is called.\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transfered\n    /// @return Whether the transfer was successful or not\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success);\n\n    /// @notice Doubles the 'minQuorumDivisor' in the case quorum has not been\n    /// achieved in 52 weeks\n    /// @return Whether the change was successful or not\n    function halveMinQuorum() returns (bool _success);\n\n    /// @return total number of proposals ever created\n    function numberOfProposals() constant returns (uint _numberOfProposals);\n\n    /// @param _proposalID Id of the new curator proposal\n    /// @return Address of the new DAO\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO);\n\n    /// @param _account The address of the account which is checked.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function isBlocked(address _account) internal returns (bool);\n\n    /// @notice If the caller is blocked by a proposal whose voting deadline\n    /// has exprired then unblock him.\n    /// @return Whether the account is blocked (not allowed to transfer tokens) or not.\n    function unblockMe() returns (bool);\n\n    event ProposalAdded(\n        uint indexed proposalID,\n        address recipient,\n        uint amount,\n        bool newCurator,\n        string description\n    );\n    event Voted(uint indexed proposalID, bool position, address indexed voter);\n    event ProposalTallied(uint indexed proposalID, bool result, uint quorum);\n    event NewCurator(address indexed _newCurator);\n    event AllowedRecipientChanged(address indexed _recipient, bool _allowed);\n}\n\n// The DAO contract itself\ncontract DAO is DAOInterface, Token, TokenCreation {\n\n    // Modifier that allows only shareholders to vote and create new proposals\n    modifier onlyTokenholders {\n        if (balanceOf(msg.sender) == 0) throw;\n            _\n    }\n\n    function DAO(\n        address _curator,\n        DAO_Creator _daoCreator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime,\n        address _privateCreation\n    ) TokenCreation(_minTokensToCreate, _closingTime, _privateCreation) {\n\n        curator = _curator;\n        daoCreator = _daoCreator;\n        proposalDeposit = _proposalDeposit;\n        rewardAccount = new ManagedAccount(address(this), false);\n        DAOrewardAccount = new ManagedAccount(address(this), false);\n        if (address(rewardAccount) == 0)\n            throw;\n        if (address(DAOrewardAccount) == 0)\n            throw;\n        lastTimeMinQuorumMet = now;\n        minQuorumDivisor = 5; // sets the minimal quorum to 20%\n        proposals.length = 1; // avoids a proposal with ID 0 because it is used\n\n        allowedRecipients[address(this)] = true;\n        allowedRecipients[curator] = true;\n    }\n\n    function () returns (bool success) {\n        if (now < closingTime + creationGracePeriod && msg.sender != address(extraBalance))\n            return createTokenProxy(msg.sender);\n        else\n            return receiveEther();\n    }\n\n\n    function receiveEther() returns (bool) {\n        return true;\n    }\n\n\n    function newProposal(\n        address _recipient,\n        uint _amount,\n        string _description,\n        bytes _transactionData,\n        uint _debatingPeriod,\n        bool _newCurator\n    ) onlyTokenholders returns (uint _proposalID) {\n\n        // Sanity check\n        if (_newCurator && (\n            _amount != 0\n            || _transactionData.length != 0\n            || _recipient == curator\n            || msg.value > 0\n            || _debatingPeriod < minSplitDebatePeriod)) {\n            throw;\n        } else if (\n            !_newCurator\n            && (!isRecipientAllowed(_recipient) || (_debatingPeriod <  minProposalDebatePeriod))\n        ) {\n            throw;\n        }\n\n        if (_debatingPeriod > 8 weeks)\n            throw;\n\n        if (!isFueled\n            || now < closingTime\n            || (msg.value < proposalDeposit && !_newCurator)) {\n\n            throw;\n        }\n\n        if (now + _debatingPeriod < now) // prevents overflow\n            throw;\n\n        // to prevent a 51% attacker to convert the ether into deposit\n        if (msg.sender == address(this))\n            throw;\n\n        _proposalID = proposals.length++;\n        Proposal p = proposals[_proposalID];\n        p.recipient = _recipient;\n        p.amount = _amount;\n        p.description = _description;\n        p.proposalHash = sha3(_recipient, _amount, _transactionData);\n        p.votingDeadline = now + _debatingPeriod;\n        p.open = true;\n        //p.proposalPassed = False; // that's default\n        p.newCurator = _newCurator;\n        if (_newCurator)\n            p.splitData.length++;\n        p.creator = msg.sender;\n        p.proposalDeposit = msg.value;\n\n        sumOfProposalDeposits += msg.value;\n\n        ProposalAdded(\n            _proposalID,\n            _recipient,\n            _amount,\n            _newCurator,\n            _description\n        );\n    }\n\n\n    function checkProposalCode(\n        uint _proposalID,\n        address _recipient,\n        uint _amount,\n        bytes _transactionData\n    ) noEther constant returns (bool _codeChecksOut) {\n        Proposal p = proposals[_proposalID];\n        return p.proposalHash == sha3(_recipient, _amount, _transactionData);\n    }\n\n\n    function vote(\n        uint _proposalID,\n        bool _supportsProposal\n    ) onlyTokenholders noEther returns (uint _voteID) {\n\n        Proposal p = proposals[_proposalID];\n        if (p.votedYes[msg.sender]\n            || p.votedNo[msg.sender]\n            || now >= p.votingDeadline) {\n\n            throw;\n        }\n\n        if (_supportsProposal) {\n            p.yea += balances[msg.sender];\n            p.votedYes[msg.sender] = true;\n        } else {\n            p.nay += balances[msg.sender];\n            p.votedNo[msg.sender] = true;\n        }\n\n        if (blocked[msg.sender] == 0) {\n            blocked[msg.sender] = _proposalID;\n        } else if (p.votingDeadline > proposals[blocked[msg.sender]].votingDeadline) {\n            // this proposal's voting deadline is further into the future than\n            // the proposal that blocks the sender so make it the blocker\n            blocked[msg.sender] = _proposalID;\n        }\n\n        Voted(_proposalID, _supportsProposal, msg.sender);\n    }\n\n\n    function executeProposal(\n        uint _proposalID,\n        bytes _transactionData\n    ) noEther returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        uint waitPeriod = p.newCurator\n            ? splitExecutionPeriod\n            : executeProposalPeriod;\n        // If we are over deadline and waiting period, assert proposal is closed\n        if (p.open && now > p.votingDeadline + waitPeriod) {\n            closeProposal(_proposalID);\n            return;\n        }\n\n        // Check if the proposal can be executed\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            // Have the votes been counted?\n            || !p.open\n            // Does the transaction code match the proposal?\n            || p.proposalHash != sha3(p.recipient, p.amount, _transactionData)) {\n\n            throw;\n        }\n\n        // If the curator removed the recipient from the whitelist, close the proposal\n        // in order to free the deposit and allow unblocking of voters\n        if (!isRecipientAllowed(p.recipient)) {\n            closeProposal(_proposalID);\n            p.creator.send(p.proposalDeposit);\n            return;\n        }\n\n        bool proposalCheck = true;\n\n        if (p.amount > actualBalance())\n            proposalCheck = false;\n\n        uint quorum = p.yea + p.nay;\n\n        // require 53% for calling newContract()\n        if (_transactionData.length >= 4 && _transactionData[0] == 0x68\n            && _transactionData[1] == 0x37 && _transactionData[2] == 0xff\n            && _transactionData[3] == 0x1e\n            && quorum < minQuorum(actualBalance() + rewardToken[address(this)])) {\n\n                proposalCheck = false;\n        }\n\n        if (quorum >= minQuorum(p.amount)) {\n            if (!p.creator.send(p.proposalDeposit))\n                throw;\n\n            lastTimeMinQuorumMet = now;\n            // set the minQuorum to 20% again, in the case it has been reached\n            if (quorum > totalSupply / 5)\n                minQuorumDivisor = 5;\n        }\n\n        // Execute result\n        if (quorum >= minQuorum(p.amount) && p.yea > p.nay && proposalCheck) {\n            if (!p.recipient.call.value(p.amount)(_transactionData))\n                throw;\n\n            p.proposalPassed = true;\n            _success = true;\n\n            // only create reward tokens when ether is not sent to the DAO itself and\n            // related addresses. Proxy addresses should be forbidden by the curator.\n            if (p.recipient != address(this) && p.recipient != address(rewardAccount)\n                && p.recipient != address(DAOrewardAccount)\n                && p.recipient != address(extraBalance)\n                && p.recipient != address(curator)) {\n\n                rewardToken[address(this)] += p.amount;\n                totalRewardToken += p.amount;\n            }\n        }\n\n        closeProposal(_proposalID);\n\n        // Initiate event\n        ProposalTallied(_proposalID, _success, quorum);\n    }\n\n\n    function closeProposal(uint _proposalID) internal {\n        Proposal p = proposals[_proposalID];\n        if (p.open)\n            sumOfProposalDeposits -= p.proposalDeposit;\n        p.open = false;\n    }\n\n    function splitDAO(\n        uint _proposalID,\n        address _newCurator\n    ) noEther onlyTokenholders returns (bool _success) {\n\n        Proposal p = proposals[_proposalID];\n\n        // Sanity check\n\n        if (now < p.votingDeadline  // has the voting deadline arrived?\n            //The request for a split expires XX days after the voting deadline\n            || now > p.votingDeadline + splitExecutionPeriod\n            // Does the new Curator address match?\n            || p.recipient != _newCurator\n            // Is it a new curator proposal?\n            || !p.newCurator\n            // Have you voted for this split?\n            || !p.votedYes[msg.sender]\n            // Did you already vote on another proposal?\n            || (blocked[msg.sender] != _proposalID && blocked[msg.sender] != 0) )  {\n\n            throw;\n        }\n\n        // If the new DAO doesn't exist yet, create the new DAO and store the\n        // current split data\n        if (address(p.splitData[0].newDAO) == 0) {\n            p.splitData[0].newDAO = createNewDAO(_newCurator);\n            // Call depth limit reached, etc.\n            if (address(p.splitData[0].newDAO) == 0)\n                throw;\n            // should never happen\n            if (this.balance < sumOfProposalDeposits)\n                throw;\n            p.splitData[0].splitBalance = actualBalance();\n            p.splitData[0].rewardToken = rewardToken[address(this)];\n            p.splitData[0].totalSupply = totalSupply;\n            p.proposalPassed = true;\n        }\n\n        // Move ether and assign new Tokens\n        uint fundsToBeMoved =\n            (balances[msg.sender] * p.splitData[0].splitBalance) /\n            p.splitData[0].totalSupply;\n        if (p.splitData[0].newDAO.createTokenProxy.value(fundsToBeMoved)(msg.sender) == false)\n            throw;\n\n\n        // Assign reward rights to new DAO\n        uint rewardTokenToBeMoved =\n            (balances[msg.sender] * p.splitData[0].rewardToken) /\n            p.splitData[0].totalSupply;\n\n        uint paidOutToBeMoved = DAOpaidOut[address(this)] * rewardTokenToBeMoved /\n            rewardToken[address(this)];\n\n        rewardToken[address(p.splitData[0].newDAO)] += rewardTokenToBeMoved;\n        if (rewardToken[address(this)] < rewardTokenToBeMoved)\n            throw;\n        rewardToken[address(this)] -= rewardTokenToBeMoved;\n\n        DAOpaidOut[address(p.splitData[0].newDAO)] += paidOutToBeMoved;\n        if (DAOpaidOut[address(this)] < paidOutToBeMoved)\n            throw;\n        DAOpaidOut[address(this)] -= paidOutToBeMoved;\n\n        // Burn DAO Tokens\n        Transfer(msg.sender, 0, balances[msg.sender]);\n        withdrawRewardFor(msg.sender); // be nice, and get his rewards\n        totalSupply -= balances[msg.sender];\n        balances[msg.sender] = 0;\n        paidOut[msg.sender] = 0;\n        return true;\n    }\n\n    function newContract(address _newContract){\n        if (msg.sender != address(this) || !allowedRecipients[_newContract]) return;\n        // move all ether\n        if (!_newContract.call.value(address(this).balance)()) {\n            throw;\n        }\n\n        //move all reward tokens\n        rewardToken[_newContract] += rewardToken[address(this)];\n        rewardToken[address(this)] = 0;\n        DAOpaidOut[_newContract] += DAOpaidOut[address(this)];\n        DAOpaidOut[address(this)] = 0;\n    }\n\n\n    function retrieveDAOReward(bool _toMembers) external noEther returns (bool _success) {\n        DAO dao = DAO(msg.sender);\n\n        if ((rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken < DAOpaidOut[msg.sender])\n            throw;\n\n        uint reward =\n            (rewardToken[msg.sender] * DAOrewardAccount.accumulatedInput()) /\n            totalRewardToken - DAOpaidOut[msg.sender];\n        if(_toMembers) {\n            if (!DAOrewardAccount.payOut(dao.rewardAccount(), reward))\n                throw;\n            }\n        else {\n            if (!DAOrewardAccount.payOut(dao, reward))\n                throw;\n        }\n        DAOpaidOut[msg.sender] += reward;\n        return true;\n    }\n\n    function getMyReward() noEther returns (bool _success) {\n        return withdrawRewardFor(msg.sender);\n    }\n\n\n    function withdrawRewardFor(address _account) noEther internal returns (bool _success) {\n        if ((balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply < paidOut[_account])\n            throw;\n\n        uint reward =\n            (balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply - paidOut[_account];\n        if (!rewardAccount.payOut(_account, reward))\n            throw;\n        paidOut[_account] += reward;\n        return true;\n    }\n\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(msg.sender)\n            && transferPaidOut(msg.sender, _to, _value)\n            && super.transfer(_to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferWithoutReward(address _to, uint256 _value) returns (bool success) {\n        if (!getMyReward())\n            throw;\n        return transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (isFueled\n            && now > closingTime\n            && !isBlocked(_from)\n            && transferPaidOut(_from, _to, _value)\n            && super.transferFrom(_from, _to, _value)) {\n\n            return true;\n        } else {\n            throw;\n        }\n    }\n\n\n    function transferFromWithoutReward(\n        address _from,\n        address _to,\n        uint256 _value\n    ) returns (bool success) {\n\n        if (!withdrawRewardFor(_from))\n            throw;\n        return transferFrom(_from, _to, _value);\n    }\n\n\n    function transferPaidOut(\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal returns (bool success) {\n\n        uint transferPaidOut = paidOut[_from] * _value / balanceOf(_from);\n        if (transferPaidOut > paidOut[_from])\n            throw;\n        paidOut[_from] -= transferPaidOut;\n        paidOut[_to] += transferPaidOut;\n        return true;\n    }\n\n\n    function changeProposalDeposit(uint _proposalDeposit) noEther external {\n        if (msg.sender != address(this) || _proposalDeposit > (actualBalance() + rewardToken[address(this)])\n            / maxDepositDivisor) {\n\n            throw;\n        }\n        proposalDeposit = _proposalDeposit;\n    }\n\n\n    function changeAllowedRecipients(address _recipient, bool _allowed) noEther external returns (bool _success) {\n        if (msg.sender != curator)\n            throw;\n        allowedRecipients[_recipient] = _allowed;\n        AllowedRecipientChanged(_recipient, _allowed);\n        return true;\n    }\n\n\n    function isRecipientAllowed(address _recipient) internal returns (bool _isAllowed) {\n        if (allowedRecipients[_recipient]\n            || (_recipient == address(extraBalance)\n                // only allowed when at least the amount held in the\n                // extraBalance account has been spent from the DAO\n                && totalRewardToken > extraBalance.accumulatedInput()))\n            return true;\n        else\n            return false;\n    }\n\n    function actualBalance() constant returns (uint _actualBalance) {\n        return this.balance - sumOfProposalDeposits;\n    }\n\n\n    function minQuorum(uint _value) internal constant returns (uint _minQuorum) {\n        // minimum of 20% and maximum of 53.33%\n        return totalSupply / minQuorumDivisor +\n            (_value * totalSupply) / (3 * (actualBalance() + rewardToken[address(this)]));\n    }\n\n\n    function halveMinQuorum() returns (bool _success) {\n        // this can only be called after `quorumHalvingPeriod` has passed or at anytime\n        // by the curator with a delay of at least `minProposalDebatePeriod` between the calls\n        if ((lastTimeMinQuorumMet < (now - quorumHalvingPeriod) || msg.sender == curator)\n            && lastTimeMinQuorumMet < (now - minProposalDebatePeriod)) {\n            lastTimeMinQuorumMet = now;\n            minQuorumDivisor *= 2;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createNewDAO(address _newCurator) internal returns (DAO _newDAO) {\n        NewCurator(_newCurator);\n        return daoCreator.createDAO(_newCurator, 0, 0, now + splitExecutionPeriod);\n    }\n\n    function numberOfProposals() constant returns (uint _numberOfProposals) {\n        // Don't count index 0. It's used by isBlocked() and exists from start\n        return proposals.length - 1;\n    }\n\n    function getNewDAOAddress(uint _proposalID) constant returns (address _newDAO) {\n        return proposals[_proposalID].splitData[0].newDAO;\n    }\n\n    function isBlocked(address _account) internal returns (bool) {\n        if (blocked[_account] == 0)\n            return false;\n        Proposal p = proposals[blocked[_account]];\n        if (now > p.votingDeadline) {\n            blocked[_account] = 0;\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function unblockMe() returns (bool) {\n        return isBlocked(msg.sender);\n    }\n}\n\ncontract DAO_Creator {\n    function createDAO(\n        address _curator,\n        uint _proposalDeposit,\n        uint _minTokensToCreate,\n        uint _closingTime\n    ) returns (DAO _newDAO) {\n\n        return new DAO(\n            _curator,\n            DAO_Creator(this),\n            _proposalDeposit,\n            _minTokensToCreate,\n            _closingTime,\n            msg.sender\n        );\n    }\n}\n",
         "ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"votingDeadline\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"bool\"},{\"name\":\"proposalPassed\",\"type\":\"bool\"},{\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"name\":\"proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"newCurator\",\"type\":\"bool\"},{\"name\":\"yea\",\"type\":\"uint256\"},{\"name\":\"nay\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"name\":\"divisor\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extraBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unblockMe\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualBalance\",\"outputs\":[{\"name\":\"_actualBalance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRecipients\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"},{\"name\":\"_debatingPeriod\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"bool\"}],\"name\":\"newProposal\",\"outputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOpaidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"newContract\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeAllowedRecipients\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halveMinQuorum\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"splitDAO\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAOrewardAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"_numberOfProposals\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeMinQuorumMet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toMembers\",\"type\":\"bool\"}],\"name\":\"retrieveDAOReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFueled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTokenProxy\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"}],\"name\":\"getNewDAOAddress\",\"outputs\":[{\"name\":\"_newDAO\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_supportsProposal\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"_voteID\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyReward\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithoutReward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"}],\"name\":\"changeProposalDeposit\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalID\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_transactionData\",\"type\":\"bytes\"}],\"name\":\"checkProposalCode\",\"outputs\":[{\"name\":\"_codeChecksOut\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCreation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"inputs\":[{\"name\":\"_curator\",\"type\":\"address\"},{\"name\":\"_daoCreator\",\"type\":\"address\"},{\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"name\":\"_minTokensToCreate\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_privateCreation\",\"type\":\"address\"}],\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FuelingToDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newCurator\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"ProposalTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"NewCurator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"AllowedRecipientChanged\",\"type\":\"event\"}]",
         "ContractName":"DAO",
         "CompilerVersion":"v0.3.1-2016-04-12-3ad5e82",
         "OptimizationUsed":"1",
         "Runs":"200",
         "ConstructorArguments":"000000000000000000000000da4a4626d3e16e094de3225a751aab7128e965260000000000000000000000004a574510c7014e4ae985403536074abe582adfc80000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000000000000000057495e100000000000000000000000000000000000000000000000000000000000000000",
         "EVMVersion":"Default",
         "Library":"",
         "LicenseType":"",
         "Proxy":"0",
         "Implementation":"",
         "SwarmSource":"",
         "SimilarMatch":"",
      }
   ]
}
```

/$
## Get Contract Creator and Creation Tx Hash
Returns a contract's deployer address and transaction hash it was created, up to 5 at a time.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=getcontractcreation
   &contractaddresses=0xB83c27805aAcA5C7082eB45C868d955Cf04C337F,0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45,0xe4462eb568E2DFbb5b0cA2D3DbB1A35C9Aa98aad,0xdAC17F958D2ee523a2206206994597C13D831ec7,0xf5b969064b91869fBF676ecAbcCd1c5563F591d0
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddresses

the contract address , up to 5 at a time

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "contractAddress":"0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45",
         "contractCreator":"0x6c9fc64a53c1b71fb3f9af64d1ae3a4931a5f4e9",
         "txHash":"0x7299cca7203f60a831756e043f4c2ccb0ee6cb7cf8aed8420f0ae99a16883a2b",
         "blockNumber":"13804681",
         "timestamp":"1639503446",
         "contractFactory":"",
         "creationBytecode":""
      },
      {
         "contractAddress":"0xb83c27805aaca5c7082eb45c868d955cf04c337f",
         "contractCreator":"0x390dcfddebeff949b9862ec91d7be337b8995553",
         "txHash":"0x0dbad4991b6727df606650635c9e632dad8a92c6363c91652307680efd336c6e",
         "blockNumber":"15062235",
         "timestamp":"1656753125",
         "contractFactory":"",
         "creationBytecode":""
      },
      {
         "contractAddress":"0xe4462eb568e2dfbb5b0ca2d3dbb1a35c9aa98aad",
         "contractCreator":"0xa6d3a33a1c66083859765b9d6e407d095a908193",
         "txHash":"0x785bcd378c8168b63c9fdef64219f8ff69eec1f785f081a74513f21b18072f93",
         "blockNumber":"14142099",
         "timestamp":"1644011208",
         "contractFactory":"",
         "creationBytecode":"0x60806040523480156200001157600080fd5b5060405162004894380380620048948339810160408190526200003491620002cb565b6040805160208101909152600081526200004e3362000081565b6200005981620000d1565b506200007a61c3506161a86703782dace9d9000060006018828288620000ea565b506200033a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620000e690600390602084019062000225565b5050565b6004546001600160a01b031615620001495760405162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a65640000000000000000000000000060448201526064015b60405180910390fd5b8661ffff168861ffff161015620001935760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081a5b9c1d5d609a1b604482015260640162000140565b6010805461ffff1990811661ffff9a8b1617909155600c8054600d9890985565ffffffff00001990971662010000988a169890980261ffff60201b1916979097176401000000009589169590950294909417861692871692909217909355600e8054909416941693909317909155600f55600480546001600160a01b0319166001600160a01b03909216919091179055565b8280546200023390620002fd565b90600052602060002090601f016020900481019282620002575760008555620002a2565b82601f106200027257805160ff1916838001178555620002a2565b82800160010185558215620002a2579182015b82811115620002a257825182559160200191906001019062000285565b50620002b0929150620002b4565b5090565b5b80821115620002b05760008155600101620002b5565b600060208284031215620002de57600080fd5b81516001600160a01b0381168114620002f657600080fd5b9392505050565b600181811c908216806200031257607f821691505b602082108114156200033457634e487b7160e01b600052602260045260246000fd5b50919050565b61454a806200034a6000396000f3fe6080604052600436106102c85760003560e01c806370a0823111610175578063c19d93fb116100dc578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b146108ca578063f3fef3a3146108ea578063f47430701461090a578063fe73ad771461092557600080fd5b8063e985e9c514610846578063f19605d61461088f578063f242432a146108aa57600080fd5b8063c19d93fb1461079c578063c8a84a82146107be578063d55f2d9d146107df578063d5abeb01146107ff578063defd6c5f1461081a578063e3b9398b1461083057600080fd5b8063923c235b1161012e578063923c235b146106e3578063956447d814610703578063a22cb46514610723578063a6a11bb114610743578063b0ad354114610759578063bb3bafd61461076c57600080fd5b806370a082311461063a578063715018a61461065a57806378e979251461066f57806381960b5c14610685578063850217d81461069b5780638da5cb5b146106bb57600080fd5b80632b85ed9c1161023457806336ef89af116101ed57806351b42b00116101c757806351b42b00146105c55780636c2f5acd146105da5780636d73e669146105fa5780636f6f53fe1461061a57600080fd5b806336ef89af1461056257806340d1d255146105825780634e1273f41461059857600080fd5b80632b85ed9c146104a95780632d345670146104ca5780632eb2c2d6146104ea5780633197cbb61461050a57806331ae450b1461052057806335e60bd41461054257600080fd5b806317bffd6b1161028657806317bffd6b146103c657806318886657146103e8578063249c478b1461040a57806324d7806c1461042a5780632639f4601461044a5780632a55205a1461046a57600080fd5b8062fdd58e146102cd57806301ffc9a71461030057806302fb0c5e146103305780630e89341c1461034a57806312686aae1461037757806316317c2114610391575b600080fd5b3480156102d957600080fd5b506102ed6102e836600461373a565b61093a565b6040519081526020015b60405180910390f35b34801561030c57600080fd5b5061032061031b366004613a6d565b6109d6565b60405190151581526020016102f7565b34801561033c57600080fd5b506006546103209060ff1681565b34801561035657600080fd5b5061036a610365366004613bd4565b6109f0565b6040516102f79190613f0a565b34801561038357600080fd5b506014546103209060ff1681565b34801561039d57600080fd5b506010546103b390600160201b900461ffff1681565b60405161ffff90911681526020016102f7565b3480156103d257600080fd5b506103e66103e13660046139e7565b610a84565b005b3480156103f457600080fd5b50600c546103b390600160201b900461ffff1681565b34801561041657600080fd5b506103e6610425366004613b30565b610ae0565b34801561043657600080fd5b5061032061044536600461371d565b610b48565b34801561045657600080fd5b506103e6610465366004613aa7565b610b81565b34801561047657600080fd5b5061048a610485366004613bed565b610c0e565b604080516001600160a01b0390931683526020830191909152016102f7565b3480156104b557600080fd5b506010546103b39062010000900461ffff1681565b3480156104d657600080fd5b506103e66104e536600461371d565b610c49565b3480156104f657600080fd5b506103e661050536600461379f565b610cc4565b34801561051657600080fd5b506102ed60085481565b34801561052c57600080fd5b50610535610d5b565b6040516102f79190613e7c565b34801561054e57600080fd5b506103e661055d366004613a52565b610e09565b34801561056e57600080fd5b506103e661057d366004613b4b565b610e64565b34801561058e57600080fd5b506102ed600b5481565b3480156105a457600080fd5b506105b86105b3366004613915565b610e8e565b6040516102f79190613ec9565b3480156105d157600080fd5b506103e6610fb7565b3480156105e657600080fd5b506103e66105f536600461373a565b61100b565b34801561060657600080fd5b506103e661061536600461371d565b611079565b34801561062657600080fd5b506103e66106353660046139e7565b6110f3565b34801561064657600080fd5b506102ed61065536600461371d565b611149565b34801561066657600080fd5b506103e6611156565b34801561067b57600080fd5b506102ed60075481565b34801561069157600080fd5b506102ed600f5481565b3480156106a757600080fd5b506103e66106b6366004613b30565b61118a565b3480156106c757600080fd5b506000546040516001600160a01b0390911681526020016102f7565b3480156106ef57600080fd5b506103206106fe366004613ae8565b6111ef565b34801561070f57600080fd5b506103e661071e366004613c0f565b61121a565b34801561072f57600080fd5b506103e661073e3660046138b4565b611271565b34801561074f57600080fd5b506102ed600a5481565b6103e6610767366004613b4b565b61127c565b34801561077857600080fd5b5061048a610787366004613bd4565b506012546013546001600160a01b0390911691565b3480156107a857600080fd5b506107b161145b565b6040516102f79190614157565b3480156107ca57600080fd5b50600c546103b39062010000900461ffff1681565b3480156107eb57600080fd5b506103e66107fa3660046138e9565b611716565b34801561080b57600080fd5b506010546103b39061ffff1681565b34801561082657600080fd5b506102ed600d5481565b34801561083c57600080fd5b506102ed60095481565b34801561085257600080fd5b50610320610861366004613766565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561089b57600080fd5b50600c546103b39061ffff1681565b3480156108b657600080fd5b506103e66108c536600461384c565b61175e565b3480156108d657600080fd5b506103e66108e536600461371d565b6117a3565b3480156108f657600080fd5b506103e661090536600461373a565b61183b565b34801561091657600080fd5b50600e546103b39061ffff1681565b34801561093157600080fd5b506103b361188f565b60006001600160a01b0383166109ab5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006109e1826118b8565b806109d057506109d082611908565b6060600380546109ff9061432b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b9061432b565b8015610a785780601f10610a4d57610100808354040283529160200191610a78565b820191906000526020600020905b815481529060010190602001808311610a5b57829003601f168201915b50505050509050919050565b33610a976000546001600160a01b031690565b6001600160a01b03161480610ab25750610ab260153361192d565b610ace5760405162461bcd60e51b81526004016109a290614113565b610ada84848484611952565b50505050565b33610af36000546001600160a01b031690565b6001600160a01b03161480610b0e5750610b0e60153361192d565b610b2a5760405162461bcd60e51b81526004016109a290614113565b610b4581610b406000546001600160a01b031690565b611ad2565b50565b6000816001600160a01b0316610b666000546001600160a01b031690565b6001600160a01b031614806109d057506109d060158361192d565b33610b946000546001600160a01b031690565b6001600160a01b03161480610baf5750610baf60153361192d565b610bcb5760405162461bcd60e51b81526004016109a290614113565b610c0a82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b9792505050565b5050565b60125460135460009182916001600160a01b039091169061271090610c3390866142a6565b610c3d9190614292565b915091505b9250929050565b6000546001600160a01b03163314610c735760405162461bcd60e51b81526004016109a2906140b6565b610c7e60158261192d565b15610b455760405133906001600160a01b038316907f7c0c3c84c67c85fcac635147348bfe374c24a1a93d0366d1cfe9d8853cbf89d590600090a3610c0a601582611baa565b6001600160a01b038516331480610ce05750610ce08533610861565b610d475760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016109a2565b610d548585858585611bbf565b5050505050565b6060610d676015611da5565b6001600160401b03811115610d7e57610d7e61442f565b604051908082528060200260200182016040528015610da7578160200160208202803683370190505b50905060005b610db76015611da5565b811015610e0557610dc9601582611daf565b828281518110610ddb57610ddb614419565b6001600160a01b039092166020928302919091019091015280610dfd81614392565b915050610dad565b5090565b33610e1c6000546001600160a01b031690565b6001600160a01b03161480610e375750610e3760153361192d565b610e535760405162461bcd60e51b81526004016109a290614113565b6014805460ff191682151517905550565b610e6c611dbb565b610e7a85858585858b611e50565b610e8633876001612040565b505050505050565b60608151835114610ef35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016109a2565b600083516001600160401b03811115610f0e57610f0e61442f565b604051908082528060200260200182016040528015610f37578160200160208202803683370190505b50905060005b8451811015610faf57610f82858281518110610f5b57610f5b614419565b6020026020010151858381518110610f7557610f75614419565b602002602001015161093a565b828281518110610f9457610f94614419565b6020908102919091010152610fa881614392565b9050610f3d565b509392505050565b33610fca6000546001600160a01b031690565b6001600160a01b03161480610fe55750610fe560153361192d565b6110015760405162461bcd60e51b81526004016109a290614113565b611009612106565b565b3361101e6000546001600160a01b031690565b6001600160a01b03161480611039575061103960153361192d565b6110555760405162461bcd60e51b81526004016109a290614113565b601280546001600160a01b0319166001600160a01b03841617905560138190555050565b6000546001600160a01b031633146110a35760405162461bcd60e51b81526004016109a2906140b6565b6110ae60158261192d565b610b455760405133906001600160a01b038316907f7e1a1a08d52e4ba0e21554733d66165fd5151f99460116223d9e3a608eec5cb190600090a3610c0a60158261214f565b336111066000546001600160a01b031690565b6001600160a01b03161480611121575061112160153361192d565b61113d5760405162461bcd60e51b81526004016109a290614113565b610ada84848484612164565b60006109d082600161093a565b6000546001600160a01b031633146111805760405162461bcd60e51b81526004016109a2906140b6565b61100960006121fc565b3361119d6000546001600160a01b031690565b6001600160a01b031614806111b857506111b860153361192d565b6111d45760405162461bcd60e51b81526004016109a290614113565b610b45816111ea6000546001600160a01b031690565b61224c565b60006005826040516112019190613cc1565b9081526040519081900360200190205460ff1692915050565b3361122d6000546001600160a01b031690565b6001600160a01b03161480611248575061124860153361192d565b6112645760405162461bcd60e51b81526004016109a290614113565b610d54858585858561227b565b610c0a338383612430565b611284612511565b61128c61188f565b61ffff168661ffff16111580156112bb5750600c5461ffff1615806112bb5750600c5461ffff90811690871611155b6112d75760405162461bcd60e51b81526004016109a290613fae565b60145460009060ff161580156113085750600e5461ffff161515806113085750600c54600160201b900461ffff1615155b1561132757503360009081526011602052604090205461ffff16611333565b61133033611149565b90505b60006009546007544261134691906142e8565b10156113de57600e5461ffff1615806113745750600e5461136c90839061ffff166142e8565b8861ffff1611155b80156113b15750600c54600160201b900461ffff1615806113b15750600c546113a9908390600160201b900461ffff166142e8565b8861ffff1611155b6113cd5760405162461bcd60e51b81526004016109a290613fae565b6113d688612598565b506001611439565b600c54600160201b900461ffff1615806114145750600c5461140c908390600160201b900461ffff166142e8565b8861ffff1611155b6114305760405162461bcd60e51b81526004016109a290613fae565b611439886125f7565b6114468787878787612608565b611451338983612040565b5050505050505050565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a08101919091523361157757604080516101c081018252600c5461ffff8082168352620100009091041660208201529081016114ff61188f565b61ffff9081168252600d546020830152600c54600160201b900481166040830152600f546060830152600e54166080820152600060a082015260065460ff16151560c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600b5461016090910152919050565b60145460ff161580156115a55750600e5461ffff161515806115a55750600c54600160201b900461ffff1615155b1561166657604080516101c081018252600c5461ffff8082168352620100009091041660208201529081016115d861188f565b61ffff9081168252600d54602080840191909152600c54600160201b90048216604080850191909152600f546060850152600e548316608085015233600090815260119092529020541660a082015260065460ff16151560c082015260075460e0820152600854610100820152600954610120820152600a54610140820152600b5461016090910152919050565b604080516101c081018252600c5461ffff80821683526201000090910416602082015290810161169461188f565b61ffff9081168252600d546020830152600c54600160201b900481166040830152600f546060830152600e5416608082015260a0016116d233611149565b61ffff16815260065460ff1615156020820152600754604082015260085460608201526009546080820152600a5460a0820152600b5460c090910152919050565b90565b6001600160a01b03821633148061173257506117328233610861565b61174e5760405162461bcd60e51b81526004016109a290613f65565b610c0a82600161ffff84166127cc565b6001600160a01b03851633148061177a575061177a8533610861565b6117965760405162461bcd60e51b81526004016109a290613f65565b610d548585858585612949565b6000546001600160a01b031633146117cd5760405162461bcd60e51b81526004016109a2906140b6565b6001600160a01b0381166118325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109a2565b610b45816121fc565b3361184e6000546001600160a01b031690565b6001600160a01b03161480611869575061186960153361192d565b6118855760405162461bcd60e51b81526004016109a290614113565b610c0a8282612a79565b601054600c546000916118b39161ffff6201000092839004811692909104166142c5565b905090565b60006001600160e01b03198216636cdb3d1360e11b14806118e957506001600160e01b031982166303a24d0760e21b145b806109d057506301ffc9a760e01b6001600160e01b03198316146109d0565b60006001600160e01b03198216632a9f3abf60e11b14806109d057506109d0826118b8565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6008541580159061196557504260085411155b6119815760405162461bcd60e51b81526004016109a290613fda565b6000805b828110156119d25785858281811061199f5761199f614419565b90506020020160208101906119b49190613b30565b6119be9083614254565b9150806119ca81614392565b915050611985565b5060105461ffff8082169183916119fa91600160201b81048216916201000090910416614254565b611a049190614254565b61ffff161115611a265760405162461bcd60e51b81526004016109a290613fae565b80601060048282829054906101000a900461ffff16611a459190614254565b92506101000a81548161ffff021916908361ffff16021790555060005b82811015610e8657611ac0848483818110611a7f57611a7f614419565b9050602002016020810190611a94919061371d565b878784818110611aa657611aa6614419565b9050602002016020810190611abb9190613b30565b612ad9565b80611aca81614392565b915050611a62565b60085415801590611ae557504260085411155b611b015760405162461bcd60e51b81526004016109a290613fda565b60105461ffff808216918491611b2891600160201b81048216916201000090910416614254565b611b329190614254565b61ffff161115611b545760405162461bcd60e51b81526004016109a290613fae565b81601060048282829054906101000a900461ffff16611b739190614254565b92506101000a81548161ffff021916908361ffff160217905550610c0a8183612ad9565b8051610c0a9060039060208401906134ed565b600061194b836001600160a01b038416612afd565b8151835114611c215760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016109a2565b6001600160a01b038416611c475760405162461bcd60e51b81526004016109a290614027565b33611c56818787878787612bf0565b60005b8451811015611d3f576000858281518110611c7657611c76614419565b602002602001015190506000858381518110611c9457611c94614419565b60209081029190910181015160008481526001835260408082206001600160a01b038e168352909352919091205490915081811015611ce55760405162461bcd60e51b81526004016109a29061406c565b60008381526001602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611d2490849061427a565b9250508190555050505080611d3890614392565b9050611c59565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d8f929190613edc565b60405180910390a4610e86818787878787612bf9565b60006109d0825490565b600061194b8383612d64565b60065460ff16611df85760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b60448201526064016109a2565b600a544210158015611e0c5750600b544211155b6110095760405162461bcd60e51b815260206004820152601560248201527427baba39b4b2329031b630b4b6903832b934b7b21760591b60448201526064016109a2565b60058383604051611e62929190613cb1565b9081526040519081900360200190205460ff1615611ebe5760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba103932b83630bc903a3930b739b0b1ba34b7b760391b60448201526064016109a2565b6000611eeb611ed08361ffff16612d8e565b51611edc85601461427a565b611ee6919061427a565b612d8e565b338585611efb8661ffff16612d8e565b604051602001611f0f959493929190613d4d565b604051602081830303815290604052805190602001209050808714611f6a5760405162461bcd60e51b81526020600482015260116024820152704d616c666f726d6564206d65737361676560781b60448201526064016109a2565b6000611fae87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c93925050612e939050565b6004549091506001600160a01b038083169116146120025760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016109a2565b600160058686604051612016929190613cb1565b908152604051908190036020019020805491151560ff199092169190911790555050505050505050565b81601060028282829054906101000a900461ffff1661205f9190614254565b825461ffff9182166101009390930a92830291909202199091161790555060145460ff161580156120b45750600e5461ffff161580159061209d5750805b806120b45750600c54600160201b900461ffff1615155b156120f75733600090815260116020526040812080548492906120dc90849061ffff16614254565b92506101000a81548161ffff021916908361ffff1602179055505b6121018383612ad9565b505050565b6000600781905560088190556006805460ff19169055600a819055600b8190556040517fb02389feab3af620e2374d4d559b436ea226b1e6c9c31fe77dfbff3d40cbe9ba9190a1565b600061194b836001600160a01b038416612eaf565b60065460ff16156121875760405162461bcd60e51b81526004016109a2906140eb565b60005b81811015610d54576121ea8383838181106121a7576121a7614419565b90506020020160208101906121bc919061371d565b8686848181106121ce576121ce614419565b90506020020160208101906121e39190613b30565b6001612040565b806121f481614392565b91505061218a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60065460ff161561226f5760405162461bcd60e51b81526004016109a2906140eb565b610c0a81836001612040565b60065460ff161561229e5760405162461bcd60e51b81526004016109a2906140eb565b4285116122ed5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420616374697661746520696e207468652070617374000000000060448201526064016109a2565b8383106123545760405162461bcd60e51b815260206004820152602f60248201527f50726573616c6520496e74657276616c2063616e6e6f74206265206c6f6e676560448201526e72207468616e207468652073616c6560881b60648201526084016109a2565b8082111580156123645750848111155b6123a65760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420636c61696d2074696d657360681b60448201526064016109a2565b60078590556123b5848661427a565b60088190556009849055600a839055600b8290556006805460ff1916600117905560075460408051918252602082019290925290810184905260608101839052608081018290527fe512d106f8172b08abfd2fc5ddfdb7e2401381780ae29e29f1352b862f1d27319060a00160405180910390a15050505050565b816001600160a01b0316836001600160a01b031614156124a45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016109a2565b6001600160a01b03838116600081815260026020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60065460ff1661254e5760405162461bcd60e51b8152602060048201526008602482015267496e61637469766560c01b60448201526064016109a2565b6007544210156110095760405162461bcd60e51b815260206004820152601560248201527450757263686173696e67206e6f742061637469766560581b60448201526064016109a2565b600f546125a99061ffff83166142a6565b3414610b455760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420707572636861736520616d6f756e742073656e740000000060448201526064016109a2565b600d546125a99061ffff83166142a6565b6005828260405161261a929190613cb1565b9081526040519081900360200190205460ff16156126765760405162461bcd60e51b815260206004820152601960248201527821b0b73737ba103932b83630bc903a3930b739b0b1ba34b7b760391b60448201526064016109a2565b6000612686611ee683601461427a565b33848460405160200161269c9493929190613cdd565b6040516020818303038152906040528051906020012090508086146126f75760405162461bcd60e51b81526020600482015260116024820152704d616c666f726d6564206d65737361676560781b60448201526064016109a2565b600061273b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b93925050612e939050565b6004549091506001600160a01b0380831691161461278f5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016109a2565b6001600585856040516127a3929190613cb1565b908152604051908190036020019020805491151560ff1990921691909117905550505050505050565b6001600160a01b03831661282e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016109a2565b3361285d8185600061283f87612efe565b61284887612efe565b60405180602001604052806000815250612bf0565b60008381526001602090815260408083206001600160a01b0388168452909152902054828110156128dc5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016109a2565b60008481526001602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b03841661296f5760405162461bcd60e51b81526004016109a290614027565b3361298e81878761297f88612efe565b61298888612efe565b87612bf0565b60008481526001602090815260408083206001600160a01b038a168452909152902054838110156129d15760405162461bcd60e51b81526004016109a29061406c565b60008581526001602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290612a1090849061427a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612a70828888888888612f49565b50505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ac6576040519150601f19603f3d011682016040523d82523d6000602084013e612acb565b606091505b505090508061210157600080fd5b610c0a82600161ffff168361ffff1660405180602001604052806000815250613013565b60008181526001830160205260408120548015612be6576000612b216001836142e8565b8554909150600090612b35906001906142e8565b9050818114612b9a576000866000018281548110612b5557612b55614419565b9060005260206000200154905080876000018481548110612b7857612b78614419565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612bab57612bab614403565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109d0565b60009150506109d0565b610e8685613116565b6001600160a01b0384163b15610e865760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612c3d9089908990889088908890600401613dd9565b602060405180830381600087803b158015612c5757600080fd5b505af1925050508015612c87575060408051601f3d908101601f19168201909252612c8491810190613a8a565b60015b612d3457612c93614445565b806308c379a01415612ccd5750612ca8614460565b80612cb35750612ccf565b8060405162461bcd60e51b81526004016109a29190613f0a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016109a2565b6001600160e01b0319811663bc197c8160e01b14612a705760405162461bcd60e51b81526004016109a290613f1d565b6000826000018281548110612d7b57612d7b614419565b9060005260206000200154905092915050565b606081612db25750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ddc5780612dc681614392565b9150612dd59050600a83614292565b9150612db6565b6000816001600160401b03811115612df657612df661442f565b6040519080825280601f01601f191660200182016040528015612e20576020820181803683370190505b5090505b8415612e8b57612e356001836142e8565b9150612e42600a866143ad565b612e4d90603061427a565b60f81b818381518110612e6257612e62614419565b60200101906001600160f81b031916908160001a905350612e84600a86614292565b9450612e24565b949350505050565b6000806000612ea285856131a9565b91509150610faf81613216565b6000818152600183016020526040812054612ef6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109d0565b5060006109d0565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612f3857612f38614419565b602090810291909101015292915050565b6001600160a01b0384163b15610e865760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612f8d9089908990889088908890600401613e37565b602060405180830381600087803b158015612fa757600080fd5b505af1925050508015612fd7575060408051601f3d908101601f19168201909252612fd491810190613a8a565b60015b612fe357612c93614445565b6001600160e01b0319811663f23a6e6160e01b14612a705760405162461bcd60e51b81526004016109a290613f1d565b6001600160a01b0384166130735760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016109a2565b336130848160008761297f88612efe565b60008481526001602090815260408083206001600160a01b0389168452909152812080548592906130b690849061427a565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d5481600087878787612f49565b60145460ff161580613131575061312b61188f565b61ffff16155b8061314b575060065460ff16801561314b57506008544210155b8061315d57506001600160a01b038116155b610b455760405162461bcd60e51b815260206004820152601f60248201527f5472616e73666572206c6f636b656420756e74696c2073616c6520656e64730060448201526064016109a2565b6000808251604114156131e05760208301516040840151606085015160001a6131d4878285856133d1565b94509450505050610c42565b82516040141561320a57602083015160408401516131ff8683836134be565b935093505050610c42565b50600090506002610c42565b600081600481111561322a5761322a6143ed565b14156132335750565b6001816004811115613247576132476143ed565b14156132955760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109a2565b60028160048111156132a9576132a96143ed565b14156132f75760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109a2565b600381600481111561330b5761330b6143ed565b14156133645760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109a2565b6004816004811115613378576133786143ed565b1415610b455760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016109a2565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561340857506000905060036134b5565b8460ff16601b1415801561342057508460ff16601c14155b1561343157506000905060046134b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613485573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134ae576000600192509250506134b5565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016134df878288856133d1565b935093505050935093915050565b8280546134f99061432b565b90600052602060002090601f01602090048101928261351b5760008555613561565b82601f1061353457805160ff1916838001178555613561565b82800160010185558215613561579182015b82811115613561578251825591602001919060010190613546565b50610e059291505b80821115610e055760008155600101613569565b60006001600160401b038311156135965761359661442f565b6040516135ad601f8501601f191660200182614366565b8091508381528484840111156135c257600080fd5b83836020830137600060208583010152509392505050565b60008083601f8401126135ec57600080fd5b5081356001600160401b0381111561360357600080fd5b6020830191508360208260051b8501011115610c4257600080fd5b600082601f83011261362f57600080fd5b8135602061363c82614231565b6040516136498282614366565b8381528281019150858301600585901b8701840188101561366957600080fd5b60005b858110156136885781358452928401929084019060010161366c565b5090979650505050505050565b803580151581146136a557600080fd5b919050565b60008083601f8401126136bc57600080fd5b5081356001600160401b038111156136d357600080fd5b602083019150836020828501011115610c4257600080fd5b600082601f8301126136fc57600080fd5b61194b8383356020850161357d565b803561ffff811681146136a557600080fd5b60006020828403121561372f57600080fd5b813561194b816144e9565b6000806040838503121561374d57600080fd5b8235613758816144e9565b946020939093013593505050565b6000806040838503121561377957600080fd5b8235613784816144e9565b91506020830135613794816144e9565b809150509250929050565b600080600080600060a086880312156137b757600080fd5b85356137c2816144e9565b945060208601356137d2816144e9565b935060408601356001600160401b03808211156137ee57600080fd5b6137fa89838a0161361e565b9450606088013591508082111561381057600080fd5b61381c89838a0161361e565b9350608088013591508082111561383257600080fd5b5061383f888289016136eb565b9150509295509295909350565b600080600080600060a0868803121561386457600080fd5b853561386f816144e9565b9450602086013561387f816144e9565b9350604086013592506060860135915060808601356001600160401b038111156138a857600080fd5b61383f888289016136eb565b600080604083850312156138c757600080fd5b82356138d2816144e9565b91506138e060208401613695565b90509250929050565b600080604083850312156138fc57600080fd5b8235613907816144e9565b91506138e06020840161370b565b6000806040838503121561392857600080fd5b82356001600160401b038082111561393f57600080fd5b818501915085601f83011261395357600080fd5b8135602061396082614231565b60405161396d8282614366565b8381528281019150858301600585901b870184018b101561398d57600080fd5b600096505b848710156139b95780356139a5816144e9565b835260019690960195918301918301613992565b50965050860135925050808211156139d057600080fd5b506139dd8582860161361e565b9150509250929050565b600080600080604085870312156139fd57600080fd5b84356001600160401b0380821115613a1457600080fd5b613a20888389016135da565b90965094506020870135915080821115613a3957600080fd5b50613a46878288016135da565b95989497509550505050565b600060208284031215613a6457600080fd5b61194b82613695565b600060208284031215613a7f57600080fd5b813561194b816144fe565b600060208284031215613a9c57600080fd5b815161194b816144fe565b60008060208385031215613aba57600080fd5b82356001600160401b03811115613ad057600080fd5b613adc858286016136aa565b90969095509350505050565b600060208284031215613afa57600080fd5b81356001600160401b03811115613b1057600080fd5b8201601f81018413613b2157600080fd5b612e8b8482356020840161357d565b600060208284031215613b4257600080fd5b61194b8261370b565b60008060008060008060808789031215613b6457600080fd5b613b6d8761370b565b95506020870135945060408701356001600160401b0380821115613b9057600080fd5b613b9c8a838b016136aa565b90965094506060890135915080821115613bb557600080fd5b50613bc289828a016136aa565b979a9699509497509295939492505050565b600060208284031215613be657600080fd5b5035919050565b60008060408385031215613c0057600080fd5b50508035926020909101359150565b600080600080600060a08688031215613c2757600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600081518084526020808501945080840160005b83811015613c7a57815187529582019590820190600101613c5e565b509495945050505050565b60008151808452613c9d8160208601602086016142ff565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613cd38184602087016142ff565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008551613d1581601a850160208a016142ff565b606086901b6bffffffffffffffffffffffff1916601a918401918201528385602e83013760009301602e019283525090949350505050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008651613d8581601a850160208b016142ff565b606087901b6bffffffffffffffffffffffff1916601a918401918201528486602e8301378481019050602e8101600081528451613dc68183602089016142ff565b91909101602e0198975050505050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090613e0590830186613c4a565b8281036060840152613e178186613c4a565b90508281036080840152613e2b8185613c85565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613e7190830184613c85565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613ebd5783516001600160a01b031683529284019291840191600101613e98565b50909695505050505050565b60208152600061194b6020830184613c4a565b604081526000613eef6040830185613c4a565b8281036020840152613f018185613c4a565b95945050505050565b60208152600061194b6020830184613c85565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b602080825260129082015271151bdbc81b585b9e481c995c5d595cdd195960721b604082015260600190565b6020808252602d908201527f43616e6e6f74206d696e74207265736572766520756e74696c2061667465722060408201526c73616c6520636f6d706c65746560981b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600e908201526d416c72656164792061637469766560901b604082015260600190565b60208082526024908201527f41646d696e436f6e74726f6c3a204d757374206265206f776e6572206f7220616040820152633236b4b760e11b606082015260800190565b815161ffff1681526101c081016020830151614179602084018261ffff169052565b50604083015161418f604084018261ffff169052565b506060830151606083015260808301516141af608084018261ffff169052565b5060a083015160a083015260c08301516141cf60c084018261ffff169052565b5060e08301516141e560e084018261ffff169052565b506101008381015115159083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a092830151929091019190915290565b60006001600160401b0382111561424a5761424a61442f565b5060051b60200190565b600061ffff808316818516808303821115614271576142716143c1565b01949350505050565b6000821982111561428d5761428d6143c1565b500190565b6000826142a1576142a16143d7565b500490565b60008160001904831182151516156142c0576142c06143c1565b500290565b600061ffff838116908316818110156142e0576142e06143c1565b039392505050565b6000828210156142fa576142fa6143c1565b500390565b60005b8381101561431a578181015183820152602001614302565b83811115610ada5750506000910152565b600181811c9082168061433f57607f821691505b6020821081141561436057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b038111828210171561438b5761438b61442f565b6040525050565b60006000198214156143a6576143a66143c1565b5060010190565b6000826143bc576143bc6143d7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156117135760046000803e5060005160e01c90565b600060443d101561446e5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561449d57505050505090565b82850191508151818111156144b55750505050505090565b843d87010160208285010111156144cf5750505050505090565b6144de60208286010187614366565b509095945050505050565b6001600160a01b0381168114610b4557600080fd5b6001600160e01b031981168114610b4557600080fdfea264697066735822122075c383e77be842ce2f6d82b1d0eaf6a26382d6e22e2923dc2f1b9164c229045864736f6c63430008070033000000000000000000000000a7817b07ad491f032232caf477d880113967a420"
      }
   ]
}
```

/$
## Verify Source Code
Submits a contract source code to an Etherscan-like explorer for verification.

üåê Tutorial : A full walk through of submitting multichain contract verification.

By verifying a contract, you agree to our terms.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=verifysourcecode
   &apikey=YourApiKeyToken
```

/$RequestResponseQuery Parameters

Requests must be sent using HTTP POST, limited to 250 verifications/day

ParameterDescriptionchainId

the chain to submit verification, such as 1 for mainnet

codeformat

single file, use
solidity-single-file
JSON file ( recommended ), use solidity-standard-json-input

sourceCode

the Solidity source code

constructorArguements

optional, include if your contract uses constructor arguments

contractaddress

the address your contract is deployed at

contractname

the name of your contract, such as

contracts/Verified.sol:Verified

compilerversion

compiler version used, such as v0.8.24+commit.e11b9ed9

for ZK Stack, the Solidity version in this field should match what zkSolc expects, eg: v0.8.29-1.0.1

*compilermode

for ZK Stack, set to solc/zksync

*zksolcVersion

for ZK Stack, zkSolc version used, such as v1.3.14

Sample Response

$Copy
```
{
    "status": "1",
    "message": "OK",
    "result": "a7lpxkm9kpcpicx7daftmjifrfhiuhf5vqqnawhkfhzfrcpnxj"
}
```

/$
## Verify Vyper Source Code
Submits a Vyper contract source code to Etherscan for verification.

By verifying a contract, you agree to our terms.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=verifysourcecode
   &apikey=YourApiKeyToken
```

/$RequestResponseQuery Parameters

Requests must be sent using HTTP POST, limited to 250 verifications/day

ParameterDescriptioncodeformat

use vyper-json

sourceCode

the Vyper source code, in JSON format

constructorArguments

optional, include if your contract uses constructor arguments

contractaddress

the address your contract is deployed at

contractname

the name of your contract, such as

contracts/Verified.vy:Verified

compilerversion

compiler version used, such as vyper:0.4.0

optimizationUsed

use 0 for no optimisation and 1 for optimisation used

Sample Response

$Copy
```
{
    "status": "1",
    "message": "OK",
    "result": "a7lpxkm9kpcpicx7daftmjifrfhiuhf5vqqnawhkfhzfrcpnxj"
}
```

/$
## Verify Stylus Source Code
Tip üí° : Arbitrum Stylus lets you write smart contracts in familiar languages like C, C++, Rust and more.

Submits a contract source code written with Stylus for verification.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=42161
   module=contract
   &action=verifysourcecode
   &apikey=YourApiKeyToken
```

/$RequestResponseQuery Parameters

Requests must be sent using HTTP POST

ParameterDescriptioncodeformat

stylus

sourceCode

the Github link of the source code,

https://github.com/OffchainLabs/stylus-hello-world

contractaddress

the address your contract is deployed at

contractname

the contract name, stylus_hello_world

compilerversion

the compiler version such asstylus:0.5.3

licenseType

the open source license to add, such as 3 for MIT

Sample Response

$Copy
```
{
    "status": "1",
    "message": "OK",
    "result": "a7lpxkm9kpcpicx7daftmjifrfhiuhf5vqqnawhkfhzfrcpnxj"
}
```

/$
## Check Source Code Verification Status
Returns the success or error status of a contract verification request.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=contract
   &action=checkverifystatus
   &guid=x3ryqcqr1zdknhfhkimqmizlcqpxncqc6nrvp3pgrcpfsqedqi
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionguid

the unique guid received from the verification request

Sample Response

If your encounter an error, reference our error list

$Copy
```
{
    "status": "1",
    "message": "OK",
    "result": "Pass - Verified"
}
```

/$
## Verify Proxy Contract
Submits a proxy contract source code to Etherscan for verification.

1. Requires a valid Etherscan API key, it will be rejected otherwise
2. Current daily limit of 100 submissions per day per user (subject to change)
3. Only supports HTTP post
4. Upon successful submission you will receive a GUID (50 characters) as a receipt
5. You may use this GUID to track the status of your submission
6. Verified proxy contracts will display the "Read/Write as Proxy" of the implementation contract under the contract address's contract tab

### Verifying Proxy Contract using cURL
RequestResponse$Copy
```
// example with only the mandatory contract address parameter
curl -d "address=0xcbdcd3815b5f975e1a2c944a9b2cd1c985a1cb7f" "https://api.etherscan.io/v2/api?chainid=1&module=contract&action=verifyproxycontract&apikey=YourApiKeyToken"

// example using the expectedimplementation optional parameter
// the expectedimplementation enforces a check to ensure the returned implementation contract address == address picked up by the verifier
curl -d "address=0xbc46363a7669f6e12353fa95bb067aead3675c29&expectedimplementation=0xe45a5176bc0f2c1198e2451c4e4501d4ed9b65a6" "https://api.etherscan.io/v2/api?chainid=1&module=contract&action=verifyproxycontract&apikey=YourApiKeyToken"
```

/$$Copy
```
// OK
{"status":"1","message":"OK","result":"gwgrrnfy56zf6vc1fljuejwg6pelnc5yns6fg6y2i6zfpgzquz"}

// NOTOK
{"status":"0","message":"NOTOK","result":"Invalid API Key"}
```

/$
### Checking Proxy Contract Verification Submission Status using cURL
RequestResponse$Copy
```
curl "https://api.etherscan.io/v2/api?chainid=1&module=contract&action=checkproxyverification&guid=gwgrrnfy56zf6vc1fljuejwg6pelnc5yns6fg6y2i6zfpgzquz&apikey=YourApiKeyToken"
```

/$$Copy
```
// OK
{"status":"1","message":"OK","result":"The proxy's (0xbc46363a7669f6e12353fa95bb067aead3675c29) implementation contract is found at 0xe45a5176bc0f2c1198e2451c4e4501d4ed9b65a6 and is successfully updated."}
                                    
// NOTOK
{"status":"0","message":"NOTOK","result":"A corresponding implementation contract was unfortunately not detected for the proxy address."}
```

/$/$[PreviousAccounts](/api-endpoints/accounts)[NextTransactions](/api-endpoints/stats)Last updated 2 months ago

================================================================================

# Transactions

Source: https://docs.etherscan.io/api-endpoints/stats
Extraction Method: playwright
Components: code_block(4)

Copy
1. üéØAPI Endpoints

# Transactions
$
## Check Contract Execution Status
Returns the status code of a contract execution.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1&module=transaction
   &action=getstatus
   &txhash=0x15f8e5ea1079d9a0bb04a4c58ae5fe7654b5b2b4463375ff7ffb490aa0032f3a
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontxhash

the string representing the transaction hash to check the execution status

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "isError":"1",
      "errDescription":"Bad jump destination"
   }
}
```

üìñ Tip: The isError field returns 0 for successful transactions and 1 for failed transactions.

## Check Transaction Receipt Status
Returns the status code of a transaction execution.

üìù Note: Only applicable for post Byzantium Fork transactions.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=transaction
   &action=gettxreceiptstatus
   &txhash=0x513c1ba0bebf66436b5fed86ab668452b7805593c05073eb2d51d3a52f480a76
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontxhash

the string representing the transaction hash to check the execution status

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "status":"1"
   }
}
```

/$üìñ Tip: The status field returns 0 for failed transactions and 1 for successful transactions.

/$[PreviousContracts](/api-endpoints/contracts)[NextBlocks](/api-endpoints/blocks)Last updated 4 months ago

================================================================================

# Blocks

Source: https://docs.etherscan.io/api-endpoints/blocks
Extraction Method: playwright
Components: code_block(18)

Copy
1. üéØAPI Endpoints

# Blocks
$Endpoints with  are under the API Pro subscription. To upgrade your API plan, browse through the Etherscan APIs page.

## Get Block And Uncle Rewards by BlockNo
Returns the block reward and 'Uncle' block rewards.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=block
   &action=getblockreward
   &blockno=2165403
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionblockno

the integer block number to check block rewards for eg. 12697906

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "blockNumber":"2165403",
      "timeStamp":"1472533979",
      "blockMiner":"0x13a06d3dfe21e0db5c016c03ea7d2509f7f8d1e3",
      "blockReward":"5314181600000000000",
      "uncles":[
         {
            "miner":"0xbcdfc35b86bedf72f0cda046a3c16829a2ef41d1",
            "unclePosition":"0",
            "blockreward":"3750000000000000000"
         },
         {
            "miner":"0x0d0c9855c722ff0c78f21e43aa275a5b8ea60dce",
            "unclePosition":"1",
            "blockreward":"3750000000000000000"
         }
      ],
      "uncleInclusionReward":"312500000000000000"
   }
}
```

‚Äã‚Äã ‚è≥ Tip : The timestamp field is denoted in Unix timestamp.

## Get Block Transactions Count by BlockNo
Returns the number of transactions in a specified block.

This endpoint is only available on Etherscan, `chainId` 1

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=block
   &action=getblocktxnscount
   &blockno=2165403
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionblockno

the integer block number to get the transaction count for, eg. 2165403

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "block":2165403,
      "txsCount":4,
      "internalTxsCount":0,
      "erc20TxsCount":0,
      "erc721TxsCount":0,
      "erc1155TxsCount":0
   }
}
```

/$
## Get Estimated Block Countdown Time by BlockNo
Returns the estimated time remaining, in seconds, until a certain block is mined.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=block
   &action=getblockcountdown
   &blockno=16701588
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionblockno

the integer block number to estimate time remaining to be mined eg. 12697906

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "CurrentBlock":"12715477",
      "CountdownBlock":"16701588",
      "RemainingBlock":"3986111",
      "EstimateTimeInSec":"52616680.2"
   }
}
```

/$
## Get Block Number by Timestamp
Returns the block number that was mined at a certain timestamp.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=block
   &action=getblocknobytime
   &timestamp=1578638524
   &closest=before
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontimestamp

the integer representing the Unix timestamp in seconds.

closest

the closest available block to the provided timestamp, either before or after

‚è≥ Tip : Convert a regular date-time to a Unix timestamp.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"12712551"
}
```

/$
## Get Daily Average Block Size
Returns the daily average block size within a date range.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyavgblocksize
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "blockSize_bytes":20373
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "blockSize_bytes":25117
      }
   ]
}
```

/$
## Get Daily Block Count and Rewards
Returns the number of blocks mined daily and the amount of block rewards.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyblkcount
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "blockCount":4848,
         "blockRewards_Eth":"14929.464690870590355682"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "blockCount":4366,
         "blockRewards_Eth":"12808.485512162356907132"
      }
   ]
}
```

/$
## Get Daily Block Rewards
Returns the amount of block rewards distributed to miners daily.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyblockrewards
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "blockRewards_Eth":"15300.65625"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "blockRewards_Eth":"12954.84375"
      }
   ]
}
```

/$
## Get Daily Average Time for A Block to be Included in the Ethereum Blockchain
Returns the daily average of time needed for a block to be successfully mined.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyavgblocktime
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "blockTime_sec":"17.67"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "blockTime_sec":"19.61"
      }
   ]
}
```

/$
## Get Daily Uncle Block Count and Rewards
Returns the number of 'Uncle' blocks mined daily and the amount of 'Uncle' block rewards.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyuncleblkcount
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "uncleBlockCount":287,
         "uncleBlockRewards_Eth":"729.75"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "uncleBlockCount":288,
         "uncleBlockRewards_Eth":"691.5"
      }
   ]
}
```

/$/$[PreviousTransactions](/api-endpoints/stats)[NextLogs](/api-endpoints/logs)Last updated 9 months ago

================================================================================

# Logs

Source: https://docs.etherscan.io/api-endpoints/logs
Extraction Method: playwright
Components: code_block(6)

Copy
1. üéØAPI Endpoints

# Logs
$
## Get Event Logs by Address
Returns the event logs from an address, with optional filtering by block range.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=logs
   &action=getLogs
   &address=0xbd3531da5cf5857e7cfaa92426877b022e612cf8
   &fromBlock=12878196
   &toBlock=12878196
   &page=1
   &offset=1000
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for logs

fromBlock

the integer block number to start searching for logs eg. 12878196

toBlock

the integer block number to stop searching for logs eg. 12879196

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

limited to 1000 records per query, use the page parameter for subsequent records

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
         "topics":[
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d",
            "0x00000000000000000000000000000000000000000000000000000000000000b5"
         ],
         "data":"0x",
         "blockNumber":"0xc48174",
         "timeStamp":"0x60f9ce56",
         "gasPrice":"0x2e90edd000",
         "gasUsed":"0x247205",
         "logIndex":"0x",
         "transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9",
         "transactionIndex":"0x"
      },
      {
         "address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
         "topics":[
            "0x645f26e653c951cec836533f8fe0616d301c20a17153debc17d7c3dbe4f32b28",
            "0x00000000000000000000000000000000000000000000000000000000000000b5"
         ],
         "data":"0x",
         "blockNumber":"0xc48174",
         "timeStamp":"0x60f9ce56",
         "gasPrice":"0x2e90edd000",
         "gasUsed":"0x247205",
         "logIndex":"0x1",
         "transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9",
         "transactionIndex":"0x"
      }
   ]
}
```

## Get Event Logs by Topics
Returns the events log in a block range, filtered by topics.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=logs
   &action=getLogs
   &fromBlock=12878196
   &toBlock=12879196
   &topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
   &topic0_1_opr=and
   &topic1=0x0000000000000000000000000000000000000000000000000000000000000000
   &page=1
   &offset=1000
   &apikey=YourApiKeyToken
```

/$Usage:

‚Ä¢ For a single topic, specify the topic number such as topic0, topic1, topic2, topic3
‚Ä¢ For multiple topics, specify the topic numbers and topic operator either and or or such as below

topic0_1_opr (and|or between topic0 & topic1), topic1_2_opr (and|or between topic1 & topic2) topic2_3_opr (and|or between topic2 & topic3), topic0_2_opr (and|or between topic0 & topic2) topic0_3_opr (and|or between topic0 & topic3), topic1_3_opr (and|or between topic1 & topic3)

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionfromBlock

the integer block number to start searching for logs eg. 12878196

toBlock

the integer block number to stop searching for logs eg. 12879196

topic

the topic numbers to search for

limited totopic0, topic1, topic2, topic3

topicOperator

the topic operator when multiple topic combinations are used

limited to and or or

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

limited to 1000 records per query, use the page parameter for subsequent records

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
         "topics":[
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d",
            "0x00000000000000000000000000000000000000000000000000000000000000b5"
         ],
         "data":"0x",
         "blockNumber":"0xc48174",
         "timeStamp":"0x60f9ce56",
         "gasPrice":"0x2e90edd000",
         "gasUsed":"0x247205",
         "logIndex":"0x",
         "transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9",
         "transactionIndex":"0x"
      },
      {
         "address":"0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
         "topics":[
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000c45a4b3b698f21f88687548e7f5a80df8b99d93d",
            "0x00000000000000000000000000000000000000000000000000000000000000b6"
         ],
         "data":"0x",
         "blockNumber":"0xc48174",
         "timeStamp":"0x60f9ce56",
         "gasPrice":"0x2e90edd000",
         "gasUsed":"0x247205",
         "logIndex":"0x2",
         "transactionHash":"0x4ffd22d986913d33927a392fe4319bcd2b62f3afe1c15a2c59f77fc2cc4c20a9",
         "transactionIndex":"0x"
      }
   ]
}
```

/$
## Get Event Logs by Address filtered by Topics
Returns the event logs from an address, filtered by topics and block range.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=logs
   &action=getLogs
   &fromBlock=15073139
   &toBlock=15074139
   &address=0x59728544b08ab483533076417fbbb2fd0b17ce3a
   &topic0=0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d
   &topic0_1_opr=and
   &topic1=0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b
   &page=1
   &offset=1000
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionfromBlock

the integer block number to start searching for logs eg. 12878196

toBlock

the integer block number to stop searching for logs eg. 12879196

address

the string representing the address to check for logs

topic

the topic numbers to search for

limited totopic0, topic1, topic2, topic3

topicOperator

the topic operator when multiple topic combinations are used

limited to and or or

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

limited to 1000 records per query, use the page parameter for subsequent records

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "address":"0x59728544b08ab483533076417fbbb2fd0b17ce3a",
         "topics":[
            "0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d",
            "0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b",
            "0x000000000000000000000000000000000000000000000000000000000000236d",
            "0x000000000000000000000000c8a5592031f93debea5d9e67a396944ee01bb2ca"
         ],
         "data":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000f207539952d0000",
         "blockNumber":"0xe60262",
         "timeStamp":"0x62c26caf",
         "gasPrice":"0x5e2d742c9",
         "gasUsed":"0xfb7f8",
         "logIndex":"0x4b",
         "transactionHash":"0x26fe1a0a403fd44ef11ee72f3b4ceff590b6ea533684cb279cb4242be463304c",
         "transactionIndex":"0x39"
      },
      {
         "address":"0x59728544b08ab483533076417fbbb2fd0b17ce3a",
         "topics":[
            "0x27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d",
            "0x00000000000000000000000023581767a106ae21c074b2276d25e5c3e136a68b",
            "0x0000000000000000000000000000000000000000000000000000000000002261",
            "0x000000000000000000000000c8a5592031f93debea5d9e67a396944ee01bb2ca"
         ],
         "data":"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000de0b6b3a7640000",
         "blockNumber":"0xe6035b",
         "timeStamp":"0x62c27ab1",
         "gasPrice":"0x27e523173",
         "gasUsed":"0x3b86e",
         "logIndex":"0x1d7",
         "transactionHash":"0x3a299413cf2c91e376e542efcf3fc308c562da79af6e992401217cc6208c7f74",
         "transactionIndex":"0x92"
      }
   ]
}
```

/$/$[PreviousBlocks](/api-endpoints/blocks)[NextGeth/Parity Proxy](/api-endpoints/geth-parity-proxy)Last updated 1 year ago

================================================================================

# Geth/Parity Proxy

Source: https://docs.etherscan.io/api-endpoints/geth-parity-proxy
Extraction Method: playwright
Components: code_block(28)

Copy
1. üéØAPI Endpoints

# Geth/Parity Proxy
$For the full documentation of available parameters and descriptions, please visit the official Ethereum JSON-RPC docs.

For compatibility with Parity, please prefix all hex strings with " 0x ".

## eth_blockNumber
Returns the number of most recent block

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_blockNumber
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample response

Copy
```
{
   "jsonrpc":"2.0",
   "id":83,
   "result":"0xc36b29"
}
```

## eth_getBlockByNumber
Returns information about a block by block number.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getBlockByNumber
   &tag=0x10d4f
   &boolean=true
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontag

the block number, in hex eg. 0xC36B3C

boolean

the boolean value to show full transaction objects.

when true, returns full transaction objects and their information, when false only returns a list of transactions.

Sample response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":{
      "baseFeePerGas":"0x5cfe76044",
      "difficulty":"0x1b4ac252b8a531",
      "extraData":"0xd883010a06846765746888676f312e31362e36856c696e7578",
      "gasLimit":"0x1caa87b",
      "gasUsed":"0x5f036a",
      "hash":"0x396288e0ad6690159d56b5502a172d54baea649698b4d7af2393cf5d98bf1bb3",
      "logsBloom":"0x5020418e211832c600000411c00098852850124700800500580d406984009104010420410c00420080414b044000012202448082084560844400d00002202b1209122000812091288804302910a246e25380282000e00002c00050009038cc205a018180028225218760100040820ac12302840050180448420420b000080000410448288400e0a2c2402050004024a240200415016c105844214060005009820302001420402003200452808508401014690208808409000033264a1b0d200c1200020280000cc0220090a8000801c00b0100a1040a8110420111870000250a22dc210a1a2002409c54140800c9804304b408053112804062088bd700900120",
      "miner":"0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c",
      "mixHash":"0xc547c797fb85c788ecfd4f5d24651bddf15805acbaad2c74b96b0b2a2317e66c",
      "nonce":"0x04a99df972bd8412",
      "number":"0xc63251",
      "parentHash":"0xbb2d43395f93dab5c424421be22d874f8c677e3f466dc993c218fa2cd90ef120",
      "receiptsRoot":"0x3de3b59d208e0fd441b6a2b3b1c814a2929f5a2d3016716465d320b4d48cc1e5",
      "sha3Uncles":"0xee2e81479a983dd3d583ab89ec7098f809f74485e3849afb58c2ea8e64dd0930",
      "size":"0x6cb6",
      "stateRoot":"0x60fdb78b92f0e621049e0aed52957971e226a11337f633856d8b953a56399510",
      "timestamp":"0x6110bab2",
      "totalDifficulty":"0x612789b0aba90e580f8",
      "transactions":[
         "0x40330c87750aa1ba1908a787b9a42d0828e53d73100ef61ae8a4d925329587b5",
         "0x6fa2208790f1154b81fc805dd7565679d8a8cc26112812ba1767e1af44c35dd4",
         "0xe31d8a1f28d4ba5a794e877d65f83032e3393809686f53fa805383ab5c2d3a3c",
         "0xa6a83df3ca7b01c5138ec05be48ff52c7293ba60c839daa55613f6f1c41fdace",
         "0x4e46edeb68a62dde4ed081fae5efffc1fb5f84957b5b3b558cdf2aa5c2621e17",
         "0x356ee444241ae2bb4ce9f77cdbf98cda9ffd6da244217f55465716300c425e82",
         "0x1a4ec2019a3f8b1934069fceff431e1370dcc13f7b2561fe0550cc50ab5f4bbc",
         "0xad7994bc966aed17be5d0b6252babef3f56e0b3f35833e9ac414b45ed80dac93"
      ],
      "transactionsRoot":"0xaceb14fcf363e67d6cdcec0d7808091b764b4428f5fd7e25fb18d222898ef779",
      "uncles":[
         "0x9e8622c7bf742bdeaf96c700c07151c1203edaf17a38ea8315b658c2e6d873cd"
      ]
   }
}
```

/$
## eth_getUncleByBlockNumberAndIndex
Returns information about a uncle by block number.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getUncleByBlockNumberAndIndex
   &tag=0xC63276
   &index=0x0
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontag

the block number, in hex eg. 0xC36B3C

index

the position of the uncle's index in the block, in hex eg. 0x5

Sample response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":{
      "baseFeePerGas":"0x65a42b13c",
      "difficulty":"0x1b1457a8247bbb",
      "extraData":"0x486976656f6e2063612d68656176792059476f6e",
      "gasLimit":"0x1ca359a",
      "gasUsed":"0xb48fe1",
      "hash":"0x1da88e3581315d009f1cb600bf06f509cd27a68cb3d6437bda8698d04089f14a",
      "logsBloom":"0xf1a360ca505cdda510d810c1c81a03b51a8a508ed601811084833072945290235c8721e012182e40d57df552cf00f1f01bc498018da19e008681832b43762a30c26e11709948a9b96883a42ad02568e3fcc3000004ee12813e4296498261619992c40e22e60bd95107c5bd8462fcca570a0095d52a4c24720b00f13a2c3d62aca81e852017470c109643b15041fd69742406083d67654fc841a18b405ab380e06a8c14c0138b6602ea8f48b2cd90ac88c3478212011136802900264718a085047810221225080dfb2c214010091a6f233883bb0084fa1c197330a10bb0006686e678b80e50e4328000041c218d1458880181281765d28d51066058f3f80a7822",
      "miner":"0x1ad91ee08f21be3de0ba2ba6918e714da6b45836",
      "mixHash":"0xa8e1dbbf073614c7ed05f44b9e92fbdb3e1d52575ed8167fa57f934210bbb0a2",
      "nonce":"0x28cc3e5b7bee9866",
      "number":"0xc63274",
      "parentHash":"0x496dae3e722efdd9ee1eb69499bdc7ed0dca54e13cd1157a42811c442f01941f",
      "receiptsRoot":"0x9c9a7a99b4af7607691a7f2a50d474290385c0a6f39c391131ea0c67307213f4",
      "sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "size":"0x224",
      "stateRoot":"0xde9a11f0ee321390c1a7843cab7b9ffd3779d438bc8f77de4361dfe2807d7dee",
      "timestamp":"0x6110bd1a",
      "transactionsRoot":"0xa04a79e531db3ec373cb63e9ebfbc9c95525de6347958918a273675d4f221575",
      "uncles":[
         
      ]
   }
}
```

/$
## eth_getBlockTransactionCountByNumber
Returns the number of transactions in a block.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getBlockTransactionCountByNumber
   &tag=0x10FB78
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontag

the block number, in hex eg. 0x10FB78

Sample response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x3"
}
```

/$
## eth_getTransactionByHash
Returns the information about a transaction requested by transaction hash.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getTransactionByHash
   &txhash=0xbc78ab8a9e9a0bca7d0321a27b2c03addeae08ba81ea98b03cd3dd237eabed44
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontxhash

the string representing the hash of the transaction

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":{
      "blockHash":"0xf850331061196b8f2b67e1f43aaa9e69504c059d3d3fb9547b04f9ed4d141ab7",
      "blockNumber":"0xcf2420",
      "from":"0x00192fb10df37c9fb26829eb2cc623cd1bf599e8",
      "gas":"0x5208",
      "gasPrice":"0x19f017ef49",
      "maxFeePerGas":"0x1f6ea08600",
      "maxPriorityFeePerGas":"0x3b9aca00",
      "hash":"0xbc78ab8a9e9a0bca7d0321a27b2c03addeae08ba81ea98b03cd3dd237eabed44",
      "input":"0x",
      "nonce":"0x33b79d",
      "to":"0xc67f4e626ee4d3f272c2fb31bad60761ab55ed9f",
      "transactionIndex":"0x5b",
      "value":"0x19755d4ce12c00",
      "type":"0x2",
      "accessList":[
         
      ],
      "chainId":"0x1",
      "v":"0x0",
      "r":"0xa681faea68ff81d191169010888bbbe90ec3eb903e31b0572cd34f13dae281b9",
      "s":"0x3f59b0fa5ce6cf38aff2cfeb68e7a503ceda2a72b4442c7e2844d63544383e3"
   }
}
```

/$
## eth_getTransactionByBlockNumberAndIndex
Returns information about a transaction by block number and transaction index position.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getTransactionByBlockNumberAndIndex
   &tag=0xC6331D
   &index=0x11A
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontag

the block number, in hex eg. 0x10FB78

index

the position of the uncle's index in the block, in hex eg. 0x0

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "result":{
      "accessList":[
         
      ],
      "blockHash":"0xdce94191f861842c2786e3594da0c0109707fd78409cab5f38e10eb87d0f301c",
      "blockNumber":"0xa36e44",
      "chainId":"0x3",
      "condition":null,
      "creates":null,
      "from":"0xb910ae1db14a9fbc64ce175bdca6d3a743f690ab",
      "gas":"0x186a0",
      "gasPrice":"0x3b9aca09",
      "hash":"0xf96ff62ba5aaf46cd824b6766f7fa6f6b9595b1dd4ef1d31bcf1f765047c2835",
      "input":"0xd0e30db0",
      "maxFeePerGas":"0x3b9aca12",
      "maxPriorityFeePerGas":"0x3b9aca00",
      "nonce":"0xc6",
      "publicKey":"0x6dbf7068e19de8457c426a758a92ea54827ebd5b8467c3a1a5c4ac19bc7570457738fe496a40ea4e1f59d39d89636a430afdec0bf2a8060c6bf7d612bfe90ad3",
      "r":"0xdecdc48821a06bf116e82b355d520dc5a44d6df98234e5344c16565b0b3dfdba",
      "raw":"0x02f8750381c6843b9aca00843b9aca12830186a094c778417e063141139fce010982780140aa0cd5ab8502540be40084d0e30db0c001a0decdc48821a06bf116e82b355d520dc5a44d6df98234e5344c16565b0b3dfdbaa06b85bb6fd8153e86b50f0011787585e8c709a2a25e7ee3c2579572f07acfd42e",
      "s":"0x6b85bb6fd8153e86b50f0011787585e8c709a2a25e7ee3c2579572f07acfd42e",
      "to":"0xc778417e063141139fce010982780140aa0cd5ab",
      "transactionIndex":"0xd",
      "type":"0x2",
      "v":"0x1",
      "value":"0x2540be400"
   },
   "id":1
}
```

/$
## eth_getTransactionCount
Returns the number of transactions performed by an address.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getTransactionCount
   &address=0x4bd5900Cb274ef15b153066D736bf3e83A9ba44e
   &tag=latest
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to get transaction count

tag

the string pre-defined block parameter, either earliest, pending or latest

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x44"
}
```

/$
## eth_sendRawTransaction
Submits a pre-signed transaction for broadcast to the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_sendRawTransaction
   &hex=0xf904808000831cfde080
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionhex

the string representing the signed raw transaction data to broadcast.

üí° Tip: Send a POST request if your hex string is particularly long.

üñãÔ∏è For more information on creating a signed raw transaction, visit this page.

Sample Response

$Copy
```
{
  "id":1,
  "jsonrpc": "2.0",
  "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
}
```

/$‚õèÔ∏è Note: The result represents the transaction hash of the submitted raw transaction.

Use eth_getTransactionReceipt to retrieve full details.

## eth_getTransactionReceipt
Returns the receipt of a transaction by transaction hash.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getTransactionReceipt
   &txhash=0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiontxhash

the string representing the hash of the transaction

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":{
      "blockHash":"0x07c17710dbb7514e92341c9f83b4aab700c5dba7c4fb98caadd7926a32e47799",
      "blockNumber":"0xcf2427",
      "contractAddress":null,
      "cumulativeGasUsed":"0xeb67d5",
      "effectiveGasPrice":"0x1a96b24c26",
      "from":"0x292f04a44506c2fd49bac032e1ca148c35a478c8",
      "gasUsed":"0xb41d",
      "logs":[
         {
            "address":"0xdac17f958d2ee523a2206206994597c13d831ec7",
            "topics":[
               "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
               "0x000000000000000000000000292f04a44506c2fd49bac032e1ca148c35a478c8",
               "0x000000000000000000000000ab6960a6511ff18ed8b8c012cb91c7f637947fc0"
            ],
            "data":"0x00000000000000000000000000000000000000000000000000000000013f81a6",
            "blockNumber":"0xcf2427",
            "transactionHash":"0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb",
            "transactionIndex":"0x122",
            "blockHash":"0x07c17710dbb7514e92341c9f83b4aab700c5dba7c4fb98caadd7926a32e47799",
            "logIndex":"0xdb",
            "removed":false
         }
      ],
      "logsBloom":"0x
      "status":"0x1",
      "to":"0xdac17f958d2ee523a2206206994597c13d831ec7",
      "transactionHash":"0xadb8aec59e80db99811ac4a0235efa3e45da32928bcff557998552250fa672eb",
      "transactionIndex":"0x122",
      "type":"0x2"
   }
}
```

/$
## eth_call
Executes a new message call immediately without creating a transaction on the block chain.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_call
   &to=0xAEEF46DB4855E25702F8237E8f403FddcaF931C0
   &data=0x70a08231000000000000000000000000e16359506c028e51f16be38986ec5746251e9724
   &tag=latest
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionto

the string representing the address to interact with

data

the hash of the method signature and encoded parameters

tag

the string pre-defined block parameter, either earliest, pending or latest

‚õΩ Note: The gas parameter is capped at 2x the current block gas limit.

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x00000000000000000000000000000000000000000000000000601d8888141c00"
}
```

/$
## eth_getCode
Returns code at a given address.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getCode
   &address=0xf75e354c5edc8efed9b59ee9f67a80845ade7d0c
   &tag=latest
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to get code

tag

the string pre-defined block parameter, either earliest, pending or latest

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x3660008037602060003660003473273930d21e01ee25e4c219b63259d214872220a261235a5a03f21560015760206000f3"
}
```

/$
## eth_getStorageAt
Returns the value from a storage position at a given address.

This endpoint is still experimental and may have potential issues

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_getStorageAt
   &address=0x6e03d9cce9d60f3e9f2597e13cd4c54c55330cfd
   &position=0x0
   &tag=latest
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to get code

position

the hex code of the position in storage, eg 0x0

tag

the string pre-defined block parameter, either earliest, pending or latest

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x0000000000000000000000003d0768da09ce77d25e2d998e6a7b6ed4b9116c2d"
}
```

/$
## eth_gasPrice
Returns the current price per gas in wei.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_gasPrice
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":73,
   "result":"0x430e23400"
}
```

/$üìñ Tip: The result is returned in wei.

Easily convert Ethereum units using our unit converter.

## eth_estimateGas
Makes a call or transaction, which won't be added to the blockchain and returns the used gas.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=proxy
   &action=eth_estimateGas
   &data=0x4e71d92d
   &to=0xf0160428a8552ac9bb7e050d90eeade4ddd52843
   &value=0xff22
   &gasPrice=0x51da038cc
   &gas=0x5f5e0ff
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiondata

the hash of the method signature and encoded parameters

to

the string representing the address to interact with

value

the value sent in this transaction, in hex eg. 0xff22

gas

the amount of gas provided for the transaction, in hex eg. 0x5f5e0ff

gasPrice

the gas price paid for each unit of gas, in wei

post EIP-1559, the gasPrice has to be higher than the block's baseFeePerGas

‚õΩ Note: The gas parameter is capped at 2x the current block gas limit.

Sample Response

$Copy
```
{
   "jsonrpc":"2.0",
   "id":1,
   "result":"0x6556"
}
```

/$/$[PreviousLogs](/api-endpoints/logs)[NextTokens](/api-endpoints/tokens)Last updated 1 year ago

================================================================================

# Tokens

Source: https://docs.etherscan.io/api-endpoints/tokens
Extraction Method: playwright
Components: code_block(22)

Copy
1. üéØAPI Endpoints

# Tokens
$Endpoints with  are under the API Pro subscription. To upgrade your API plan, browse through the Etherscan APIs page.

## Get ERC20-Token TotalSupply by ContractAddress
Returns the current amount of an ERC-20 token in circulation.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=tokensupply
   &contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"21265524714464"
}
```

üìà Tip : The result is returned in the token's smallest decimal representation.

Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398

## Get ERC20-Token Account Balance for TokenContractAddress
Returns the current balance of an ERC-20 token of an address.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=tokenbalance
   &contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055
   &address=0xe04f27eb70e025b78871a2ad7eabe85e61212761
   &tag=latest&apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token

address

the string representing the address to check for token balance

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"135499"
}
```

/$üìà Tip : The result is returned in the token's smallest decimal representation.

Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398

## Get Historical ERC20-Token TotalSupply by ContractAddress & BlockNo
Returns the amount of an ERC-20 token in circulation at a certain block height.

üìù Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=tokensupplyhistory
   &contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055
   &blockno=8000000
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token

blockno

the integer block number to check total supply for eg. 12697906

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"21265524714464"
}
```

/$üìà Tip : The result is returned in the token's smallest decimal representation.

Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398

## Get Historical ERC20-Token Account Balance for TokenContractAddress by BlockNo
Returns the balance of an ERC-20 token of an address at a certain block height.

üìù Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=tokenbalancehistory
   &contractaddress=0x57d90b64a1a57749b0f932f1a3395792e12e7055
   &address=0xe04f27eb70e025b78871a2ad7eabe85e61212761
   &blockno=8000000
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token

address

the string representing the address to check for balance

blockno

the integer block number to check total supply for eg. 12697906

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"135499"
}
```

/$üìà Tip : The result is returned in the token's smallest decimal representation.

Eg. a token with a balance of 215.241526476136819398 and 18 decimal places will be returned as 215241526476136819398

## Get Token Holder List by Contract Address
Return the current ERC20 token holders and number of tokens held.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=token
   &action=tokenholderlist
   &contractaddress=0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d
   &page=1
   &offset=10
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "TokenHolderAddress":"0x0000000000000000000000000000000000000000",
         "TokenHolderQuantity":"34956"
      },
      {
         "TokenHolderAddress":"0x000000000000084e91743124a982076c59f10084",
         "TokenHolderQuantity":"1"
      },
      {
         "TokenHolderAddress":"0x0000000000000d9054f605ca65a2647c2b521422",
         "TokenHolderQuantity":"10000000"
      },
      {
         "TokenHolderAddress":"0x0000000000002d534ff79e9c69e7fcc742f0be83",
         "TokenHolderQuantity":"5"
      },
      {
         "TokenHolderAddress":"0x0000000000003f5e74c1ba8a66b48e6f3d71ae82",
         "TokenHolderQuantity":"1"
      }
   ]
}
```

/$
## Get Token Holder Count by Contract Address
Return a simple count of the number of ERC20 token holders.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=token
   &action=tokenholdercount
   &contractaddress=0xaaaebe6fe48e54f431b0c390cfaf0b017d09d42d
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC20 token

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"30484"
}
```

/$
## Get Top Token Holders
Retrieves the top token holders of a specified ERC20 token.

Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

This beta endpoint is only available on Ethereum for now ‚ú®

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=token
   &action=topholders
   &contractaddress=0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9
   &offset=1000
   &apikey=YourApiKeyToken
```

/$Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20 token to get top holders

for all holders, use the "tokenholderlist" endpoint

offset

the number of top holders, eg top 100

limited at top 1000

Sample Response

$Copy
```
{
   "status":"1",
   "message":"Ok",
   "result":[
      {
         "TokenHolderAddress":"0x4da27a545c0c5b758a6ba100e3a049001de870f5",
         "TokenHolderQuantity":"2696124.3026660371030000",
         "TokenHolderAddressType":"C"
      },
      {
         "TokenHolderAddress":"0xa700b4eb416be35b2911fd5dee80678ff64ff6c9",
         "TokenHolderQuantity":"1650828.8050095955930000",
         "TokenHolderAddressType":"C"
      }
   ]
}
```

/$
## Get Token Info by ContractAddress
Returns project information and social media links of an ERC20/ERC721/ERC1155 token.

üìù Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=token
   &action=tokeninfo
   &contractaddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptioncontractaddress

the contract address of the ERC-20/ERC-721 token to retrieve token info

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "contractAddress":"0x0e3a2a1f2146d86a604adc220b4967a898d7fe07",
         "tokenName":"Gods Unchained Cards",
         "symbol":"CARD",
         "divisor":"0",
         "tokenType":"ERC721",
         "totalSupply":"6962498",
         "blueCheckmark":"true",
         "description":"A TCG on the Ethereum blockchain that uses NFT's to bring real ownership to in-game assets.",
         "website":"https://godsunchained.com/",
         "email":"",
         "blog":"https://medium.com/@fuelgames",
         "reddit":"https://www.reddit.com/r/GodsUnchained/",
         "slack":"",
         "facebook":"https://www.facebook.com/godsunchained/",
         "twitter":"https://twitter.com/godsunchained",
         "bitcointalk":"",
         "github":"",
         "telegram":"",
         "wechat":"",
         "linkedin":"",
         "discord":"https://discordapp.com/invite/DKGr2pW",
         "whitepaper":"",
         "tokenPriceUSD":"0.000000000000000000"
      }
   ]
}
```

/$
## Get Address ERC20 Token Holding
Returns the ERC-20 tokens and amount held by an address.

Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=addresstokenbalance
   &address=0x983e3660c0bE01991785F80f266A84B911ab59b0
   &page=1
   &offset=100
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "TokenAddress":"0xffffffff2ba8f66d4e51811c5190992176930278",
         "TokenName":"Furucombo",
         "TokenSymbol":"COMBO",
         "TokenQuantity":"1861606940000000000",
         "TokenDivisor":"18"
      },
      {
         "TokenAddress":"0x53a1e9912323b8016424d6287286e3b6de263f76",
         "TokenName":"PUTIN Token",
         "TokenSymbol":"PTT",
         "TokenQuantity":"3500000000000000000000",
         "TokenDivisor":"18"
      },
      {
         "TokenAddress":"0xb753428af26e81097e7fd17f40c88aaa3e04902c",
         "TokenName":"Spice",
         "TokenSymbol":"SFI",
         "TokenQuantity":"7",
         "TokenDivisor":"18"
      },
      {
         "TokenAddress":"0x1b40183efb4dd766f11bda7a7c3ad8982e998421",
         "TokenName":"VesperToken",
         "TokenSymbol":"VSP",
         "TokenQuantity":"962",
         "TokenDivisor":"18"
      },
      {
         "TokenAddress":"0x37e83a94c6b1bdb816b59ac71dd02cf154d8111f",
         "TokenName":"PhotoChromic",
         "TokenSymbol":"PHCR",
         "TokenQuantity":"4608452961264910063288",
         "TokenDivisor":"18"
      }
   ]
}
```

/$
## Get Address ERC721 Token Holding
Returns the ERC-721 tokens and amount held by an address.

Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=addresstokennftbalance
   &address=0x6b52e83941eb10f9c613c395a834457559a80114
   &page=1
   &offset=100
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for balance

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "TokenAddress":"0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
         "TokenName":"CloneX",
         "TokenSymbol":"CloneX",
         "TokenQuantity":"52"
      },
      {
         "TokenAddress":"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
         "TokenName":"BoredApeYachtClub",
         "TokenSymbol":"BAYC",
         "TokenQuantity":"1"
      },
      {
         "TokenAddress":"0x60e4d786628fea6478f785a6d7e704777c86a7c6",
         "TokenName":"MutantApeYachtClub",
         "TokenSymbol":"MAYC",
         "TokenQuantity":"1"
      },
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenName":"Azuki",
         "TokenSymbol":"AZUKI",
         "TokenQuantity":"1"
      },
      {
         "TokenAddress":"0x7bd29408f11d2bfc23c34f18275bbf23bb716bc7",
         "TokenName":"Meebits",
         "TokenSymbol":"‚öá",
         "TokenQuantity":"1"
      }
   ]
}
```

/$
## Get Address ERC721 Token Inventory By Contract Address
Returns the ERC-721 token inventory of an address, filtered by contract address.

üìù Note : This endpoint is throttled to 2 calls/second regardless of API Pro tier.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=addresstokennftinventory
   &address=0x123432244443b54409430979df8333f9308a6040
   &contractaddress=0xed5af388653567af2f388e6224dc7c4b3241c544
   &page=1
   &offset=100
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for inventory

contractaddress

the string representing the ERC-721 token contractaddress to check for inventory

page

the integer page number, if pagination is enabled

offset

the number of records displayed per page

limited to 1000 records per query, use the page parameter for subsequent records

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenId":"5401"
      },
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenId":"7411"
      },
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenId":"453"
      },
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenId":"8080"
      },
      {
         "TokenAddress":"0xed5af388653567af2f388e6224dc7c4b3241c544",
         "TokenId":"4255"
      }
   ]
}
```

/$/$[PreviousGeth/Parity Proxy](/api-endpoints/geth-parity-proxy)[NextGas Tracker](/api-endpoints/gas-tracker)Last updated 22 days ago

================================================================================

# Gas Tracker

Source: https://docs.etherscan.io/api-endpoints/gas-tracker
Extraction Method: playwright
Components: code_block(10)

Copy
1. üéØAPI Endpoints

# Gas Tracker
$Endpoints with  are under the API Pro subscription. To upgrade your API plan, browse through the Etherscan APIs page.

## Get Estimation of Confirmation Time
Returns the estimated time, in seconds, for a transaction to be confirmed on the blockchain.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=gastracker
   &action=gasestimate
   &gasprice=2000000000
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptiongasprice

the price paid per unit of gas, in wei

üìñ Tip: Easily convert Ethereum units using our unit converter.

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"9227"
}
```

üìù Note: The result is returned in seconds.

## Get Gas Oracle
Returns the current Safe, Proposed and Fast gas prices.

Post EIP-1559 üî• changes :

‚Ä¢ Safe/Proposed/Fast gas price recommendations are now modeled as Priority Fees.
‚Ä¢ New field suggestBaseFee , the baseFee of the next pending block
‚Ä¢ New field gasUsedRatio, to estimate how busy the network is

Learn more about the gas changes in EIP-1559.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=gastracker
   &action=gasoracle
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "LastBlock":"13053741",
      "SafeGasPrice":"20",
      "ProposeGasPrice":"22",
      "FastGasPrice":"24",
      "suggestBaseFee":"19.230609716",
      "gasUsedRatio":"0.370119078777807,0.8954731,0.550911766666667,0.212457033333333,0.552463633333333"
   }
}
```

/$‚õΩ Note: The gas prices are returned in Gwei.

## Get Daily Average Gas Limit
Returns the historical daily average gas limit of the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
    ?chainid=1
   &module=stats
    &action=dailyavggaslimit
    &startdate=2019-02-01
    &enddate=2019-02-28
    &sort=asc
    &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-01-31

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "gasLimit":"8001360"
      },
      {
         "UTCDate":"2019-02-27",
         "unixTimeStamp":"1551225600",
         "gasLimit":"8001071"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "gasLimit":"8001137"
      }
   ]
}
```

/$
## Get Ethereum Daily Total Gas Used
Returns the total amount of gas used daily for transctions on the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
    ?chainid=1
   &module=stats
    &action=dailygasused
    &startdate=2019-02-01
    &enddate=2019-02-28
    &sort=asc
    &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-01-31

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "gasUsed":"32761450415"
      },
      {
         "UTCDate":"2019-02-27",
         "unixTimeStamp":"1551225600",
         "gasUsed":"32657440136"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "gasUsed":"33081119561"
      }
   ]
}
```

/$
## Get Daily Average Gas Price
Returns the daily average gas price used on the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
    ?chainid=1
   &module=stats
    &action=dailyavggasprice
    &startdate=2019-02-01
    &enddate=2019-02-28
    &sort=asc
    &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-01-31

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "maxGasPrice_Wei":"60814303896257",
         "minGasPrice_Wei":"432495",
         "avgGasPrice_Wei":"13234562600"
      },
      {
         "UTCDate":"2019-02-27",
         "unixTimeStamp":"1551225600",
         "maxGasPrice_Wei":"42000000000000",
         "minGasPrice_Wei":"1000000",
         "avgGasPrice_Wei":"16334617513"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "maxGasPrice_Wei":"237222222222257",
         "minGasPrice_Wei":"100000000",
         "avgGasPrice_Wei":"18834674068"
      }
   ]
}
```

/$/$[PreviousTokens](/api-endpoints/tokens)[NextStats](/api-endpoints/stats-1)Last updated 1 year ago

================================================================================

# Stats

Source: https://docs.etherscan.io/api-endpoints/stats-1
Extraction Method: playwright
Components: code_block(24)

Copy
1. üéØAPI Endpoints

# Stats
$Endpoints with  are under the API Pro subscription. To upgrade your API plan, kindly visit Etherscan API Pro.

## Get Total Supply of Ether
Returns the current amount of Ether in circulation excluding ETH2 Staking rewards and EIP1559 burnt fees.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=ethsupply
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":"116487067186500000000000000"
}
```

üìñ Tip : Easily convert Ethereum units using our unit converter.

## Get Total Supply of Ether 2
Returns the current amount of Ether in circulation, ETH2 Staking rewards, EIP1559 burnt fees, and total withdrawn ETH from the beacon chain.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=ethsupply2
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "EthSupply":"122373866217800000000000000",
      "Eth2Staking":"1157529105115885000000000",
      "BurntFees":"3102505506455601519229842",
      "WithdrawnTotal":"1170200333006131000000000"
   }
}
```

/$üìù Note: The EthSupply is calculated before adding ETH minted as Eth2Staking rewards and subtracting BurntFees from EIP-1559.

For more information, check out our Ether Total Supply Dashboard.

## Get Native Token Last Price
Returns the latest price of the native/gas token, eg ETH for Ethereum, BNB for BSC and POL for Polygon.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=ethprice
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "ethbtc":"0.06116",
      "ethbtc_timestamp":"1624961308",
      "ethusd":"2149.18",
      "ethusd_timestamp":"1624961308"
   }
}
```

/$‚è≥ Tip : The timestamps are represented in Unix timestamp.

## Get Ethereum Nodes Size
Returns the size of the Ethereum blockchain, in bytes, over a date range.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=chainsize
   &startdate=2019-02-01
   &enddate=2019-02-28
   &clienttype=geth
   &syncmode=default
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

clienttype

the Ethereum node client to use, either geth or parity

syncmode

the type of node to run, either default or archive

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"7156164",
         "chainTimeStamp":"2019-02-01",
         "chainSize":"184726421279",
         "clientType":"Geth",
         "syncMode":"Default"
      }
      {
         "blockNumber":"7276521",
         "chainTimeStamp":"2019-02-28",
         "chainSize":"197073145113",
         "clientType":"Geth",
         "syncMode":"Default"
      }
   ]
}
```

/$‚õìÔ∏è Tip : The chainSize is represented in bytes.

## Get Total Nodes Count
Returns the total number of discoverable Ethereum nodes.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=nodecount
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "UTCDate":"2021-06-29",
      "TotalNodeCount":"6413"
   }
}
```

/$
## Get Daily Network Transaction Fee
Returns the amount of transaction fees paid to miners per day.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailytxnfee
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "transactionFee_Eth":"358.558440870590355682"
      }
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "transactionFee_Eth":"545.141762162356907132"
      }
   ]
}
```

/$
## Get Daily New Address Count
Returns the number of new Ethereum addresses created per day.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailynewaddress
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "newAddressCount":54081
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "newAddressCount":53117
      }
   ]
}
```

/$
## Get Daily Network Utilization
Returns the daily average gas used over gas limit, in percentage.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailynetutilization
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "networkUtilization":"0.8464"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "networkUtilization":"0.9472"
      }
   ]
}
```

/$
## Get Daily Average Network Hash Rate
Returns the historical measure of processing power of the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyavghashrate
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "networkHashRate":"143116.0140"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "networkHashRate":"157689.3983"
      }
   ]
}
```

/$üî• Tip : The networkHashRate is represented in GigaHashes ( GH/s ).

## Get Daily Transaction Count
Returns the number of transactions performed on the Ethereum blockchain per day.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailytx
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "transactionCount":498856
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "transactionCount":541458
      }
   ]
}
```

/$
## Get Daily Average Network Difficulty
Returns the historical mining difficulty of the Ethereum network.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=dailyavgnetdifficulty
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "networkDifficulty":"2,408.028"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "networkDifficulty":"2,927.453"
      }
   ]
}
```

/$‚Äã‚Äã üî• Tip : The networkDifficulty is represented in TeraHashes ( TH/s ).

## Get Ether Historical Price
Returns the historical price of 1 ETH.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=stats
   &action=ethdailyprice
   &startdate=2019-02-01
   &enddate=2019-02-28
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionstartdate

the starting date in yyyy-MM-dd format, eg. 2019-02-01

enddate

the ending date in yyyy-MM-dd format, eg. 2019-02-28

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "UTCDate":"2019-02-01",
         "unixTimeStamp":"1548979200",
         "value":"107.03"
      },
      {
         "UTCDate":"2019-02-28",
         "unixTimeStamp":"1551312000",
         "value":"136.29"
      }
   ]
}
```

/$‚Äã‚Äã üí∞ Tip : The value is represented in US Dollars ( USD ).

/$[PreviousGas Tracker](/api-endpoints/gas-tracker)[NextL2 Deposits/Withdrawals](/api-endpoints/chain-specific)Last updated 4 months ago

================================================================================

# L2 Deposits/Withdrawals

Source: https://docs.etherscan.io/api-endpoints/chain-specific
Extraction Method: playwright
Components: code_block(6)

Copy
1. üéØAPI Endpoints

# L2 Deposits/Withdrawals
$
### Get List of Plasma Deposits by Address
Returns a list of Plasma Deposits received by an address.

Applicable to Polygon (137)

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=137
   &module=account
   &action=txnbridge
   &address=0x4880bd4695a8e59dc527d124085749744b6c988e
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

Parameter

Description

address

the string representing the address to check for balance

blocktype

the string pre-defined block type, blocksfor canonical blocks

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

Sample Response

Copy
```
{
    "status":"1",
    "message":"OK",
    "result":[
        {
            "blockNumber":"19569186",
            "timeStamp":"1632738360",
            "blockReward":"388632493476995398"
        },
        {
            "blockNumber":"19569185",
            "timeStamp":"1632738358",
            "blockReward":"1021530830332446078"
        },
    ]
}
```

‚è≥ Note : The timeStamp is represented in Unix timestamp.

## Get List of Deposit Transactions
Returns a list of deposits in ETH or ERC20 tokens from Ethereum to L2.

Applicable to Arbitrum Stack (42161, 42170, 33139, 660279) and Optimism Stack (10, 8453, 130, 252, 480, 5000, 81457)

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=10
   &module=account
   &action=getdeposittxs
   &address=0x4880bd4695a8e59dc527d124085749744b6c988e
   &page=1
   &offset=1000
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for deposits

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"132992375",
         "timeStamp":"1741583527",
         "blockHash":"0xef2ff158c8b12be842429f4a8cde58bfa6a389c5274b46f8a1dd2ee7f958ca4d",
         "hash":"0x64ccd0cfa9f333578b36227492f3bc7f5f3ec4bfa82cdc46f82884db680d8e5b",
         "nonce":"520502",
         "from":"0x36bde71c97b33cc4729cf772ae268934f7ab70b2",
         "to":"0x4200000000000000000000000000000000000007",
         "value":"598200000000000",
         "gas":"490798",
         "gasPrice":"0",
         "input":"0xd764ad0b000100000000000000000000000000000000000000000000000000000002802a00000000000000000000000099c9fc46f92e8a1c0dec1b1747d010903e884be100000000000000000000000042000000000000000000000000000000000000100000000000000000000000000000000000000000000000000002200f4a8130000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a41635f5fd0000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000080f3950a4d371c43360f292a4170624abd9eed030000000000000000000000000000000000000000000000000002200f4a8130000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
         "cumulativeGasUsed":"169497",
         "gasUsed":"117234",
         "isError":"0",
         "errDescription":"",
         "txreceipt_status":"1",
         "queueIndex":"999999",
         "L1transactionhash":"0x303bd05c47e62e1243a33210e535ebc70a7567e53a9972fbdef52ee5bcda5acb",
         "L1TxOrigin":"0x36bde71c97b33cc4729cf772ae268934f7ab70b2",
         "tokenAddress":"ETH",
         "tokenSentFrom":"",
         "tokenSentTo":"0x80f3950a4d371c43360f292a4170624abd9eed03",
         "tokenValue":"598200000000000"
      }
   ]
}
```

/$
## Get List of Withdrawal Transactions
Returns a list of withdrawals in ETH or ERC20 tokens from L2 to Ethereum.

Applicable to Arbitrum Stack (42161, 42170, 33139, 660279) and Optimism Stack (10, 8453, 130, 252, 480, 5000, 81457)

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=10
   &module=account
   &action=getwithdrawaltxs
   &address=0x4880bd4695a8e59dc527d124085749744b6c988e
   &page=1
   &offset=1000
   &sort=asc
   &apikey=YourApiKeyToken
```

/$> Try this endpoint in your browser üîó

RequestResponseQuery Parameters

ParameterDescriptionaddress

the string representing the address to check for withdrawals

page

the integer page number, if pagination is enabled

offset

the number of transactions displayed per page

sort

the sorting preference, use asc to sort by ascending and desc to sort by descending

Sample Response

$Copy
```
{
   "status":"1",
   "message":"OK",
   "result":[
      {
         "blockNumber":"132987309",
         "timeStamp":"1741573395",
         "blockHash":"0xee9bfd69e6866e940c40df94189128534fa5f4af2deec13a793bf49fd5d72f95",
         "hash":"0x481037348afbf205068c2e90d28f7afbb5a1542383e47abf05cbf09a8f960d8d",
         "nonce":"3768",
         "from":"0x7202932b3be70edf0657d5bada261d610e0d7db9",
         "to":"0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789",
         "value":"0",
         "gas":"361196",
         "gasPrice":"162984",
         "input":"0x1fad948c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000007202932b3be70edf0657d5bada261d610e0d7db900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f9911231b6ae18952ff6dd6b707908e1aac21b07000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000001ebb8000000000000000000000000000000000000000000000000000000000000d82f00000000000000000000000000000000000000000000000000000000001161ce0000000000000000000000000000000000000000000000000000000000031f83000000000000000000000000000000000000000000000000000000000001adb0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164b61d27f600000000000000000000000042000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c4a3a79548000000000000000000000000dd05d9ee23eda1fcabaffddbf7996be735ac76820000000000000000000000004c5f9b65192a9de5473f88a6ffa0b9555ac1a00d0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000754fd9098af9ddcb41da48a1d78f91f1398965addc000000000000000067ce4d870000000000000000000000000000000000000000f49dfc37e1b78d8a69beb7a79fa80783a872d8b31f938179b60cfa692a32715a3d43f5f7df06b71ba8ecfde76ab35e87c37a7fd91ed161eedaa23482fbcc04de1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000410bddfb295213f2782e48b6e3dcd14c4bd515abc4eb8b5caa256a7ae663e64ad02ab58567a6e53b0adb4345960e074a1ce66de0f43a72fd0244e06f3c3c11ab1e1b00000000000000000000000000000000000000000000000000000000000000",
         "cumulativeGasUsed":"8397325",
         "gasUsed":"216038",
         "isError":"0",
         "errDescription":"",
         "txreceipt_status":"1",
         "message":"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007812e000000000000000000000000000000000000000000000000000000000000008056a0c3605593b977fbd97477bbefc139704a8bde838a2c53097662dd9992fef200000000000000000000000000000000000000000000000000000000000001e4d764ad0b00010000000000000000000000000000000000000000000000000000000060d9000000000000000000000000420000000000000000000000000000000000001000000000000000000000000099c9fc46f92e8a1c0dec1b1747d010903e884be100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e40166a07a0000000000000000000000004fc15c91a9c4a9efb404174464687e8e128730c2000000000000000000000000dd05d9ee23eda1fcabaffddbf7996be735ac7682000000000000000000000000f9911231b6ae18952ff6dd6b707908e1aac21b070000000000000000000000004c5f9b65192a9de5473f88a6ffa0b9555ac1a00d0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
         "messageNonce":"1766847064778384329583297500742918515827483896875618958121606201292644580",
         "status":"Waiting",
         "L1transactionhash":"",
         "tokenAddress":"0xdd05d9ee23eda1fcabaffddbf7996be735ac7682",
         "withdrawalType":"ERC20",
         "tokenValue":"1000000000000000000",
         "L1transactionhashProve":""
      }
   ]
}
```

/$/$[PreviousStats](/api-endpoints/stats-1)[NextUsage](/api-endpoints/blocks-1)Last updated 6 months ago

================================================================================

# Usage

Source: https://docs.etherscan.io/api-endpoints/blocks-1
Extraction Method: playwright
Components: code_block(4)

Copy
1. üéØAPI Endpoints

# Usage
$
## Check Etherscan credit usage
Returns the amount of API credits available, and reset countdown.

Copy
```
https://api.etherscan.io/v2/api
   ?&module=getapilimit
   &action=getapilimit
   &apikey=YourApiKeyToken
```

> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

Copy
```
{
   "status":"1",
   "message":"OK",
   "result":{
      "creditsUsed":207,
      "creditsAvailable":499793,
      "creditLimit":500000,
      "limitInterval":"daily",
      "intervalExpiryTimespan":"07:20:05"
   }
}
```

## List supported chains
Returns a list of supported Etherscan explorer APIs, with web explorer links.

Copy
```
https://api.etherscan.io/v2/chainlist
```

> Try this endpoint in your browser üîó

RequestResponseNo parameters required.

Sample Response

Copy
```
{
   "totalcount":50,
   "result":[
      {
         "chainname":"Ethereum Mainnet",
         "chainid":"1",
         "blockexplorer":"https://etherscan.io",
         "apiurl":"https://api.etherscan.io/v2/api?chainid=1",
         "status":1
      },
      {
         "chainname":"Sepolia Testnet",
         "chainid":"11155111",
         "blockexplorer":"https://sepolia.etherscan.io",
         "apiurl":"https://api.etherscan.io/v2/api?chainid=11155111",
         "status":1
      }
   ]
}
```

/$[PreviousL2 Deposits/Withdrawals](/api-endpoints/chain-specific)[NextEtherscan API PRO](/api-pro/etherscan-api-pro)Last updated 11 months ago

================================================================================

# Etherscan API PRO

Source: https://docs.etherscan.io/api-pro/etherscan-api-pro
Extraction Method: playwright

Copy
1. üèÜAPI PRO

# Etherscan API PRO
$Etherscan API PRO  provides additional endpoints and higher rate limits to help you ship faster and support more users üö¢

Ethereum along with 50+ chains are supported chain under Etherscan API PRO, to upgrade head over to Etherscan APIs

### Professional Endpoints
Focus on your product and avoid manual indexing for

‚Ä¢ ETH and token balances at any point in time
‚Ä¢ Token holders of any contract address ( selected chains )
‚Ä¢ Token portfolio of an address ( selected chains )

### Higher Rate Limits‚Äã
Support more users with additional rate limits, from 10 upwards of 30 calls/s.

Suitable for accounting platforms üí∞ doing daily portfolio updates, exchanges üè¶ doing transaction checks, NFT platforms üé® indexing trades.

For enterprise usage, scale up with dedicated instances that have dedicated rate limits.

## Upgrading to API PRO
To upgrade, head over to Etherscan and select a suitable plan.

You will also have access to all Etherscan based explorer APIs.

Do note that PRO endpoints are only available on mainnet, and not to any testnets.

/$[PreviousUsage](/api-endpoints/blocks-1)[NextTrack Uniswap V4 DEX Trades](/cookbook/track-uniswap-v4-dex-trades)Last updated 11 months ago

================================================================================

# Track Uniswap V4 DEX Trades

Source: https://docs.etherscan.io/cookbook/track-uniswap-v4-dex-trades
Extraction Method: playwright
Components: code_block(5)

Copy
1. üç≥Cookbook

# Track Uniswap V4 DEX Trades
$üêô Sample code gist

## 1. Find Your Token Pair
This can be as simple as searching for the token pair on Uniswap.

Let's track the DEX trades of the ETH/USDC pool, which represents users buying or selling ETH.

## 2. Filter by Swap Events
We're interested in Swap events that come from this pool, which denote the exchange of tokens.

That will be specified as topic0for the logs search.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=logs
   &action=getLogs
   &address=0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640
   &fromBlock=22057075
   &toBlock=22057085
   &topic0=0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67
   &page=1
   &offset=1000
   &apikey=YourApiKeyToken
```

## 3. Get Contract ABI
You can think of a contract's Application Binary Interface ( ABI ) as an instruction manual, it details the function names, format and units to decode the logs.

If the contract is verified on Etherscan, it can be retrieved via API too

$Copy
```
const requestAbi = await fetch("https://api.etherscan.io/v2/api?chainid=1&module=contract&action=getabi&address=0xc7bbec68d12a0d1830360f8ec58fa599ba1b0e9b&apikey=VZFDUWB3YGQ1YCDKTCU1D6DDSS6EWI62KV")
const abi = await requestAbi.json()
```

/$
## 4. Decode
Using the Ethers library <3, define the contract interface using the ABI retrieved earlier.

$Copy
```
const pool = new ethers.Interface(abi.result)

logs.result.forEach((log) => {

    const parsedLog = pool.parseLog(log)
    console.log(parsedLog)
        
}
```

/$A decoded log looks like this, still looks pretty gnarly.

$Copy
```
{
name: 'Swap',
  signature: 'Swap(address,address,int256,int256,uint160,uint128,int24)',
  topic: '0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67',
  args: Result(7) [
    '0xE592427A0AEce92De3Edee1F18E0157C05861564',
    '0x69460570c93f9DE5E2edbC3052bf10125f0Ca22d',
    -7613616n, // usdc received
    3990000000000000n, // eth sent
    1813267739337528689462471906224148n,
    18077430532320816861n,
    200776n
  ]
}
```

/$
## 4. Actually Making Sense Of It
The token amounts swapped are denoted in the args result 2 and 3 ( array starts with 0 anon ).

-7613616n ( 7.613616 in decimals ) USDC

3990000000000000n ( 0.00399 in decimals ) ETH

A negative number indicates tokens were sent from the pool to the user address, this is the token you receive.

Conventionally we denote receiving USDC ( amount0 being negative ) as a sell transaction and receiving ETH ( amount1 being negative ) as a buy transaction.

$Copy
```
if (amount0 < 0) {

   console.log(`Sell ${amount1} ETH at ${(amount0 * -1) / amount1}`)
   
} else {

   console.log(`Buy ${amount1 * -1} ETH at ${(amount0 * -1) / amount1}`)
   
}
```

/$This transaction can then be interpreted as selling 0.00399 ETH for 7.613616 USDC at $1908

Logs are always a little complicated to work with, let us know if you get stuck anywhere ‚ú®.

/$[PreviousEtherscan API PRO](/api-pro/etherscan-api-pro)[NextGet An Address's Full Transaction History](/get-an-addresss-full-transaction-history)Last updated 6 months ago

================================================================================

# Get An Address's Full Transaction History

Source: https://docs.etherscan.io/get-an-addresss-full-transaction-history
Extraction Method: playwright
Components: code_block(2)

Copy
# Get An Address's Full Transaction History
$üêô Sample code gist

## 1. First Fetch
Start by fetching transactions from the block 0 up to the latest block.

Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlist
   &address=0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
   &startblock=0
   &endblock=latest
   &page=1
   &offset=1000
   &sort=asc
   &apikey=YourApiKeyToken
```

In most cases, if your address has less than max records ( 1k for free and 5k for paid tiers ), you're good to go ‚ö°

If you receive = max records, its likely that your address has exceeded the query limit.

## 2. Second Fetch Using Next Block Number
Its important to set the next  startBlock to the block number of the last record - 1

The next block number to start your query from should be the block number of the last record - 1.

$Copy
```
https://api.etherscan.io/v2/api
   ?chainid=1
   &module=account
   &action=txlist
   &address=0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
   &startblock=${lastBlockNumber - 1}
   &endblock=latest
   &page=1
   &offset=1000
   &sort=asc
   &apikey=YourApiKeyToken
```

/$This is due to the possibility of transactions from the last block returned being cut off by the limit, particularly if a block contains many transactions to that address.

The transactions from the last block number skipped will subsequently be fully queried in the next request.

## 3. Rinse And Repeat
Once we receive less than max records limit, we've gotten all 71134 transactions üéâ

This address took approximately 30s to fully pull for free tiers and 10s for paid tiers.

The same pagination applies to ERC20 token transactions, NFT transactions to get an address's full transaction history across 50+ supported chains.

/$[PreviousTrack Uniswap V4 DEX Trades](/cookbook/track-uniswap-v4-dex-trades)[NextVerify with Foundry](/contract-verification/verify-with-foundry)Last updated 6 months ago

================================================================================

# Verify with Foundry

Source: https://docs.etherscan.io/contract-verification/verify-with-foundry
Extraction Method: playwright
Components: code_block(3)

Copy
1. ‚úÖContract Verification

# Verify with Foundry
$You must update to  the nightly build of Foundry to use this at the moment, via foundryup --install nightly

Foundry is a tool that helps take the heat off smart contract development steps üî•, including compiling, deploying and finally submitting your contract for verification.

## Deploy and Verify
Copy
```
forge create --broadcast --rpc-url https://rpc.sepolia.ethpandaops.io --private-key YourPrivateKey src/ContractFile.sol:ContractName --verify --verifier etherscan --etherscan-api-key YourApiKeyToken
```

## Verify an Existing Contract
Copy
```
forge verify-contract --watch --chain sepolia 0x324eca20b358b18e48f2611f7452560ce3b3c1bb src/ContractFile.sol:ContractName --verifier etherscan --etherscan-api-key YourApiKeyToken
```

## Migrating from V1
API keys from any other explorer (such as BscScan/Basescan/Arbiscan) have been deprecated ‚ö†Ô∏è

The easiest way to migrate is to simply pass in your Etherscan key via --etherscan-api-key

For deployment scripts, in foundry.toml you can shorten your settings to this, without needing a different key for each chain.

Copy
```
etherscan_api_key = "VZFDUWB3YGQ1YCDKTCU1D6DDSS6EWI62KV"

[etherscan]
mainnet   = { key = "${ETHERSCAN_API_KEY}" }
```

> This open source integration was shipped by @iainnash and the Foundry team üôå

/$[PreviousGet An Address's Full Transaction History](/get-an-addresss-full-transaction-history)[NextVerify with Hardhat](/contract-verification/verify-with-hardhat)Last updated 4 months ago

================================================================================

# Verify with Hardhat

Source: https://docs.etherscan.io/contract-verification/verify-with-hardhat
Extraction Method: playwright
Components: code_block(6)

Copy
1. ‚úÖContract Verification

# Verify with Hardhat
$Make sure you've updated to @nomicfoundation/hardhat-verify@^2.0.14, see migrating notes if you have an existing project

Hardhat is a smart contracts development tool, perfect if you're familiar with Javascript/Typescript.

If you've yet to setup Hardhat, here's the official guide, the following steps are to setup the verification plugin.

## Install
Via npm

Copy
```
npm i @nomicfoundation/hardhat-verify
```

## Config
In hardhat.config.ts, import the plugin

Copy
```
import "@nomicfoundation/hardhat-verify";
```

Add your Etherscan key

Copy
```
config: HardhatUserConfig = {
  solidity: "0.8.28",
  networks: {
    sepolia: {
      url: `https://1rpc.io/sepolia`,
      accounts: [SEPOLIA_PRIVATE_KEY],
    },
  },
   etherscan: {
    apiKey: "YourEtherscanApiKey"
  }
};
```

## Deploy and Verify
$Copy
```
npx hardhat ignition deploy ./ignition/modules/Lock.ts --network sepolia --verify
```

/$
## Verify an Existing Contract
$Copy
```
npx hardhat verify --network sepolia 0xdCBdBAA8404554502B433106e62728B659aCfE3b
```

/$
## Custom Chains
For super new Etherscan based explorers that are not supported by Hardhat yet, you can add them as a customChain in hardhat.config.ts ‚ú®

$Copy
```
etherscan: {
    apiKey: "YourEtherscanApiKey",
    customChains: [
    {
      network: "sonic",
      chainId: 146,
      urls: {
        apiURL: "https://api.etherscan.io/v2/api",
        browserURL: "https://sonicscan.org"
      }
    },
    {
      network: "katana",
      chainId: 146,
      urls: {
        apiURL: "https://api.etherscan.io/v2/api",
        browserURL: "https://sonicscan.org"
      }
    }
  ]
}
```

/$
## Migrating from V1
API keys from any other explorer (such as BscScan/Basescan/Arbiscan) have been deprecated ‚ö†Ô∏è

This change largely affects the hardhat.config.ts file ‚Äî good riddance to the long customChains entries for each explorer.

Update your config to a single Etherscan apiKey entry as per above.

> This open source integration was shipped by @antico5 and the Hardhat team üôå

/$[PreviousVerify with Foundry](/contract-verification/verify-with-foundry)[NextVerify with Remix](/contract-verification/verify-with-remix)Last updated 2 months ago

================================================================================

# Verify with Remix

Source: https://docs.etherscan.io/contract-verification/verify-with-remix
Extraction Method: playwright

Copy
1. ‚úÖContract Verification

# Verify with Remix
$Remix is a no-frills, just works in your browser Solidity development tool.

## Activate
Once you've written and deployed your contract, click on the Plugin Manager üîåand select Contract Verification

## Add an API Key
The Etherscan verification plugin requires an API key, because grumpy bots yell at us on a daily basis.

Click the "Enable" link and add your key, leave the rest as default.

## Verify
Fill in the chain, contract address, and contract name that you deployed.

Now that the Etherscan checkbox is enabled, click Verify. Without this, the contract won't show as verified on Etherscan's explorer.

Once verified, you will see a happy green ‚úÖ

> This open source integration was shipped by @manuelwedler and the Remix team üôå

/$[PreviousVerify with Hardhat](/contract-verification/verify-with-hardhat)[NextCommon Verification Errors](/common-verification-errors)Last updated 4 months ago

================================================================================

# Common Verification Errors

Source: https://docs.etherscan.io/common-verification-errors
Extraction Method: playwright

Copy
# Common Verification Errors
$
### Invalid API Key
> Invalid API Key (#err2)|10

Make sure to use your Etherscan API key, and submit verification via the V2 endpoint https://api.etherscan.io/v2/api?chainid=1

In Foundry, check that you have updated to the supported version v1.2.0

Keys from other explorers such as BscScan/Basescan/Arbiscan have been deprecated.

### Contract Doesn't Match
> "Compiled contract deployment bytecode does NOT match the transaction deployment bytecode"

The submitted source code does not match the contract code deployed on chain.

Common causes include using a different compiler version or enabling optimisation runs.

For an exact match to be found, both source code and compiler settings specified have to exactly match the deployment conditions, for the same bytecode to be reproduced.

### Solidity Compilation Error
> "Solidity Compilation Error: Identifier not found or not unique"

A compilation issue occured due to syntax errors in your Solidity source code.

Consider debugging your contract with any compiler such as Remix or Hardhat and reference the error from Solidity's official documentation.

### Contract Not Deployed
> "Unable to locate ContractCode at 0x539a277b12a3f6723f4c1769edb11b0be7c214da

The contract has not been deployed at the specific address at the specific chain.

Check the contract address you've deployed, if your contract deployment transaction has succeeded or if the chainId specified is correct.

### Missing or Invalid Library Names
> "Library was required but suitable match not found"

A library was used in your contract deployment, but was not specified, misspelt or using the wrong library address.

Double check on your library names ( case sensitive such as "PRBMath" ) or ensure that a matching library name and library address is provided.

### Missing Contract Name
> "Unable to locate ContractName , did you specify the correct Contract Name ?"

A match was not found with the name of the contract specified when multiple files are provided.

Ensure that you have provided the correct contract name to be matched against, and making sure you submit the main contract name not its dependencies.

### No Deployment Bytecode Match Found
> "Compiled contract deployment bytecode does NOT match the transaction deployment bytecode"

The compilation of your submitted source code does not match the deployment bytecode, ie the constructor arguments plus general initialisation code and runtime bytecode.

Similar solution as above, do take into account constructor arguments as well below.

### Missing/Invalid Constructor Arguments
> "Please check if the correct constructor argument was entered"

if your contract utilized the constructor keyword, you should provide it in hex format. Otherwise, leave this field empty as it is.

You may reference your original deployment's constructor arguments or determine it from the end of your compiled bytecode.

There is an easter egg üê£ on the constructorArguements field spelling, using it as the "correct" spelling may miss your submission!

### Mismatched bytecode metadata hash
> "Please check if the correct bytecodehash was specified via standard-json verification."

The metadata hash settings of your submitted source code differs from the settings of your original contract deployment, such as being set to ipfs or none.

Submit your contract verification using the solc json input format, and specify the settings accordingly there.

Other submission formats such as single file or multifile do not support changing this setting, and will use the compiler defaults.

### Similar Match Found
> "This contract already Similar Matches the deployed ByteCode at 0x4200000000000000000000000000000000000042"

This error indicates that the contract has already been verified via Similar Match to another contract.

Kindly reach out to us at this point of time to have this updated to Full Match if required.

### Unsupported Solc Version
> "Invalid or not supported solc version, see https://etherscan.io/solcversions for list"

This error is thrown when you specify to use an invalid or unsupported version of the Solidity Compiler ie. below v0.4.11-nightly.2017.3.15+.

Do let us know if you need to verify a contract below this supported version such as to prove you deployed the first NFT!

### Source Code Already Verified
> "Source code already verified"

An Exact Match has been obtained, get back to having your coffee!

If you think this might be a mistake, do check if you've submitted verification to the right explorer/chain, a contract that is verified on Etherscan is not automatically verified on other explorers.

### Unsupported File Import Callback
> "Source "@openzeppelin/contracts/ERC20.sol" not found: File import callback not supported"

This error is thrown when contracts reference imports from external sources, such as OpenZeppelin libraries or Github links.

Consider flattening your source code into a single file, or use the Solidity Standard Json Input format that comes with tools such as Hardhat to resolve these external imports.

### Invalid chainId
The chain you've specified does not have an Etherscan-like explorer.

Check the chainId used against our supported list.

### Contract Verifies on Another Explorer
Our verification standard is strict, reach out regardless and we'll have a look.

### Temporary Error
> "This could be a temporary error, please retry or contact us (Error Code 10001/10002/10003)"

Something went wrong on our end, which could include downtime or maintenance windows.

Please retry this in a while or ping us if this continues to persist!

/$[PreviousVerify with Remix](/contract-verification/verify-with-remix)[NextFAQ](/support/v2-faq)Last updated 4 months ago

================================================================================

## Failed Pages

- https://docs.etherscan.io/: Duplicate content
- https://docs.etherscan.io/etherscan-v2/v2-quickstart: Duplicate content
